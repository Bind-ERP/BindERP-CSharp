/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalogsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Obtiene la lista de bancos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>BankPage</returns>
        BankPage CatalogsGetBanks (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Obtiene la lista de bancos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>ApiResponse of BankPage</returns>
        ApiResponse<BankPage> CatalogsGetBanksWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Obtiene la lista de Categorias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Category1&gt;</returns>
        List<Category1> CatalogsGetCategories ();

        /// <summary>
        /// Obtiene la lista de Categorias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Category1&gt;</returns>
        ApiResponse<List<Category1>> CatalogsGetCategoriesWithHttpInfo ();
        /// <summary>
        /// Obtiene la lista de monedas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>CurrencyPage</returns>
        CurrencyPage CatalogsGetCurrencies (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Obtiene la lista de monedas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>ApiResponse of CurrencyPage</returns>
        ApiResponse<CurrencyPage> CatalogsGetCurrenciesWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Obtiene la lista de sucursales.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>LocationPage</returns>
        LocationPage CatalogsGetLocations (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Obtiene la lista de sucursales.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>ApiResponse of LocationPage</returns>
        ApiResponse<LocationPage> CatalogsGetLocationsWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Obtiene la lista de precios.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>PriceListPage</returns>
        PriceListPage CatalogsGetPriceLists (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Obtiene la lista de precios.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>ApiResponse of PriceListPage</returns>
        ApiResponse<PriceListPage> CatalogsGetPriceListsWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Obtiene la lista de Series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docType"></param>
        /// <returns>List&lt;Series&gt;</returns>
        List<Series> CatalogsGetSeries (int? docType);

        /// <summary>
        /// Obtiene la lista de Series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docType"></param>
        /// <returns>ApiResponse of List&lt;Series&gt;</returns>
        ApiResponse<List<Series>> CatalogsGetSeriesWithHttpInfo (int? docType);
        /// <summary>
        /// Obtiene la lista de usuarios.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>UserPage</returns>
        UserPage CatalogsGetUsers (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Obtiene la lista de usuarios.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>ApiResponse of UserPage</returns>
        ApiResponse<UserPage> CatalogsGetUsersWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Obtiene la lista de bancos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of BankPage</returns>
        System.Threading.Tasks.Task<BankPage> CatalogsGetBanksAsync (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Obtiene la lista de bancos.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of ApiResponse (BankPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankPage>> CatalogsGetBanksAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Obtiene la lista de Categorias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Category1&gt;</returns>
        System.Threading.Tasks.Task<List<Category1>> CatalogsGetCategoriesAsync ();

        /// <summary>
        /// Obtiene la lista de Categorias.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Category1&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Category1>>> CatalogsGetCategoriesAsyncWithHttpInfo ();
        /// <summary>
        /// Obtiene la lista de monedas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of CurrencyPage</returns>
        System.Threading.Tasks.Task<CurrencyPage> CatalogsGetCurrenciesAsync (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Obtiene la lista de monedas.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of ApiResponse (CurrencyPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrencyPage>> CatalogsGetCurrenciesAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Obtiene la lista de sucursales.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of LocationPage</returns>
        System.Threading.Tasks.Task<LocationPage> CatalogsGetLocationsAsync (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Obtiene la lista de sucursales.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of ApiResponse (LocationPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationPage>> CatalogsGetLocationsAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Obtiene la lista de precios.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of PriceListPage</returns>
        System.Threading.Tasks.Task<PriceListPage> CatalogsGetPriceListsAsync (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Obtiene la lista de precios.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of ApiResponse (PriceListPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PriceListPage>> CatalogsGetPriceListsAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        /// <summary>
        /// Obtiene la lista de Series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docType"></param>
        /// <returns>Task of List&lt;Series&gt;</returns>
        System.Threading.Tasks.Task<List<Series>> CatalogsGetSeriesAsync (int? docType);

        /// <summary>
        /// Obtiene la lista de Series.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docType"></param>
        /// <returns>Task of ApiResponse (List&lt;Series&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Series>>> CatalogsGetSeriesAsyncWithHttpInfo (int? docType);
        /// <summary>
        /// Obtiene la lista de usuarios.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of UserPage</returns>
        System.Threading.Tasks.Task<UserPage> CatalogsGetUsersAsync (string filter = null, string orderby = null, int? top = null, int? skip = null);

        /// <summary>
        /// Obtiene la lista de usuarios.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of ApiResponse (UserPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserPage>> CatalogsGetUsersAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogsApi : ICatalogsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Obtiene la lista de bancos. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>BankPage</returns>
        public BankPage CatalogsGetBanks (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<BankPage> localVarResponse = CatalogsGetBanksWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene la lista de bancos. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>ApiResponse of BankPage</returns>
        public ApiResponse< BankPage > CatalogsGetBanksWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/Banks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetBanks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankPage)));
        }

        /// <summary>
        /// Obtiene la lista de bancos. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of BankPage</returns>
        public async System.Threading.Tasks.Task<BankPage> CatalogsGetBanksAsync (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<BankPage> localVarResponse = await CatalogsGetBanksAsyncWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene la lista de bancos. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of ApiResponse (BankPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankPage>> CatalogsGetBanksAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/Banks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetBanks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankPage)));
        }

        /// <summary>
        /// Obtiene la lista de Categorias. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Category1&gt;</returns>
        public List<Category1> CatalogsGetCategories ()
        {
             ApiResponse<List<Category1>> localVarResponse = CatalogsGetCategoriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene la lista de Categorias. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Category1&gt;</returns>
        public ApiResponse< List<Category1> > CatalogsGetCategoriesWithHttpInfo ()
        {

            var localVarPath = "/api/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Category1>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Category1>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Category1>)));
        }

        /// <summary>
        /// Obtiene la lista de Categorias. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Category1&gt;</returns>
        public async System.Threading.Tasks.Task<List<Category1>> CatalogsGetCategoriesAsync ()
        {
             ApiResponse<List<Category1>> localVarResponse = await CatalogsGetCategoriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene la lista de Categorias. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Category1&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Category1>>> CatalogsGetCategoriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Category1>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Category1>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Category1>)));
        }

        /// <summary>
        /// Obtiene la lista de monedas. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>CurrencyPage</returns>
        public CurrencyPage CatalogsGetCurrencies (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<CurrencyPage> localVarResponse = CatalogsGetCurrenciesWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene la lista de monedas. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>ApiResponse of CurrencyPage</returns>
        public ApiResponse< CurrencyPage > CatalogsGetCurrenciesWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/Currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrencyPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrencyPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrencyPage)));
        }

        /// <summary>
        /// Obtiene la lista de monedas. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of CurrencyPage</returns>
        public async System.Threading.Tasks.Task<CurrencyPage> CatalogsGetCurrenciesAsync (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<CurrencyPage> localVarResponse = await CatalogsGetCurrenciesAsyncWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene la lista de monedas. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of ApiResponse (CurrencyPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CurrencyPage>> CatalogsGetCurrenciesAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/Currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrencyPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrencyPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrencyPage)));
        }

        /// <summary>
        /// Obtiene la lista de sucursales. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>LocationPage</returns>
        public LocationPage CatalogsGetLocations (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<LocationPage> localVarResponse = CatalogsGetLocationsWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene la lista de sucursales. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>ApiResponse of LocationPage</returns>
        public ApiResponse< LocationPage > CatalogsGetLocationsWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/Locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LocationPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LocationPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LocationPage)));
        }

        /// <summary>
        /// Obtiene la lista de sucursales. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of LocationPage</returns>
        public async System.Threading.Tasks.Task<LocationPage> CatalogsGetLocationsAsync (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<LocationPage> localVarResponse = await CatalogsGetLocationsAsyncWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene la lista de sucursales. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of ApiResponse (LocationPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LocationPage>> CatalogsGetLocationsAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/Locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetLocations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LocationPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LocationPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LocationPage)));
        }

        /// <summary>
        /// Obtiene la lista de precios. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>PriceListPage</returns>
        public PriceListPage CatalogsGetPriceLists (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<PriceListPage> localVarResponse = CatalogsGetPriceListsWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene la lista de precios. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>ApiResponse of PriceListPage</returns>
        public ApiResponse< PriceListPage > CatalogsGetPriceListsWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/PriceLists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetPriceLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PriceListPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PriceListPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PriceListPage)));
        }

        /// <summary>
        /// Obtiene la lista de precios. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of PriceListPage</returns>
        public async System.Threading.Tasks.Task<PriceListPage> CatalogsGetPriceListsAsync (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<PriceListPage> localVarResponse = await CatalogsGetPriceListsAsyncWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene la lista de precios. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of ApiResponse (PriceListPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PriceListPage>> CatalogsGetPriceListsAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/PriceLists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetPriceLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PriceListPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PriceListPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PriceListPage)));
        }

        /// <summary>
        /// Obtiene la lista de Series. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docType"></param>
        /// <returns>List&lt;Series&gt;</returns>
        public List<Series> CatalogsGetSeries (int? docType)
        {
             ApiResponse<List<Series>> localVarResponse = CatalogsGetSeriesWithHttpInfo(docType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene la lista de Series. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docType"></param>
        /// <returns>ApiResponse of List&lt;Series&gt;</returns>
        public ApiResponse< List<Series> > CatalogsGetSeriesWithHttpInfo (int? docType)
        {
            // verify the required parameter 'docType' is set
            if (docType == null)
                throw new ApiException(400, "Missing required parameter 'docType' when calling CatalogsApi->CatalogsGetSeries");

            var localVarPath = "/api/Series";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "docType", docType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Series>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Series>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Series>)));
        }

        /// <summary>
        /// Obtiene la lista de Series. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docType"></param>
        /// <returns>Task of List&lt;Series&gt;</returns>
        public async System.Threading.Tasks.Task<List<Series>> CatalogsGetSeriesAsync (int? docType)
        {
             ApiResponse<List<Series>> localVarResponse = await CatalogsGetSeriesAsyncWithHttpInfo(docType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene la lista de Series. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docType"></param>
        /// <returns>Task of ApiResponse (List&lt;Series&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Series>>> CatalogsGetSeriesAsyncWithHttpInfo (int? docType)
        {
            // verify the required parameter 'docType' is set
            if (docType == null)
                throw new ApiException(400, "Missing required parameter 'docType' when calling CatalogsApi->CatalogsGetSeries");

            var localVarPath = "/api/Series";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "docType", docType)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetSeries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Series>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Series>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Series>)));
        }

        /// <summary>
        /// Obtiene la lista de usuarios. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>UserPage</returns>
        public UserPage CatalogsGetUsers (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<UserPage> localVarResponse = CatalogsGetUsersWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene la lista de usuarios. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>ApiResponse of UserPage</returns>
        public ApiResponse< UserPage > CatalogsGetUsersWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPage)));
        }

        /// <summary>
        /// Obtiene la lista de usuarios. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of UserPage</returns>
        public async System.Threading.Tasks.Task<UserPage> CatalogsGetUsersAsync (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {
             ApiResponse<UserPage> localVarResponse = await CatalogsGetUsersAsyncWithHttpInfo(filter, orderby, top, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene la lista de usuarios. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filters the results, based on a Boolean condition. (optional)</param>
        /// <param name="orderby">Sorts the results. (optional)</param>
        /// <param name="top">Returns only the first n results. (optional)</param>
        /// <param name="skip">Skips the first n results. (optional)</param>
        /// <returns>Task of ApiResponse (UserPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserPage>> CatalogsGetUsersAsyncWithHttpInfo (string filter = null, string orderby = null, int? top = null, int? skip = null)
        {

            var localVarPath = "/api/Users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (orderby != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderby", orderby)); // query parameter
            if (top != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CatalogsGetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserPage)));
        }

    }
}
