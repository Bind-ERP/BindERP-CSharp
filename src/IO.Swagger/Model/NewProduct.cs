/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NewProduct
    /// </summary>
    [DataContract]
    public partial class NewProduct :  IEquatable<NewProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewProduct" /> class.
        /// </summary>
        /// <param name="Title">Title (required).</param>
        /// <param name="Cost">Cost (required).</param>
        /// <param name="Price">Price (required).</param>
        /// <param name="CurrencyId">CurrencyId (required).</param>
        /// <param name="ExchangeRate">ExchangeRate.</param>
        /// <param name="Code">Code (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="SKU">SKU.</param>
        /// <param name="Category1Id">Category1Id.</param>
        /// <param name="Category2Id">Category2Id.</param>
        /// <param name="Category3Id">Category3Id.</param>
        /// <param name="IEPS">IEPS.</param>
        public NewProduct(string Title = default(string), double? Cost = default(double?), double? Price = default(double?), Guid? CurrencyId = default(Guid?), double? ExchangeRate = default(double?), string Code = default(string), string Description = default(string), string SKU = default(string), Guid? Category1Id = default(Guid?), Guid? Category2Id = default(Guid?), Guid? Category3Id = default(Guid?), double? IEPS = default(double?))
        {
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for NewProduct and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Cost" is required (not null)
            if (Cost == null)
            {
                throw new InvalidDataException("Cost is a required property for NewProduct and cannot be null");
            }
            else
            {
                this.Cost = Cost;
            }
            // to ensure "Price" is required (not null)
            if (Price == null)
            {
                throw new InvalidDataException("Price is a required property for NewProduct and cannot be null");
            }
            else
            {
                this.Price = Price;
            }
            // to ensure "CurrencyId" is required (not null)
            if (CurrencyId == null)
            {
                throw new InvalidDataException("CurrencyId is a required property for NewProduct and cannot be null");
            }
            else
            {
                this.CurrencyId = CurrencyId;
            }
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for NewProduct and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            this.ExchangeRate = ExchangeRate;
            this.Description = Description;
            this.SKU = SKU;
            this.Category1Id = Category1Id;
            this.Category2Id = Category2Id;
            this.Category3Id = Category3Id;
            this.IEPS = IEPS;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="Cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="CurrencyId", EmitDefaultValue=false)]
        public Guid? CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="ExchangeRate", EmitDefaultValue=false)]
        public double? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SKU
        /// </summary>
        [DataMember(Name="SKU", EmitDefaultValue=false)]
        public string SKU { get; set; }

        /// <summary>
        /// Gets or Sets Category1Id
        /// </summary>
        [DataMember(Name="Category1Id", EmitDefaultValue=false)]
        public Guid? Category1Id { get; set; }

        /// <summary>
        /// Gets or Sets Category2Id
        /// </summary>
        [DataMember(Name="Category2Id", EmitDefaultValue=false)]
        public Guid? Category2Id { get; set; }

        /// <summary>
        /// Gets or Sets Category3Id
        /// </summary>
        [DataMember(Name="Category3Id", EmitDefaultValue=false)]
        public Guid? Category3Id { get; set; }

        /// <summary>
        /// Gets or Sets IEPS
        /// </summary>
        [DataMember(Name="IEPS", EmitDefaultValue=false)]
        public double? IEPS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewProduct {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SKU: ").Append(SKU).Append("\n");
            sb.Append("  Category1Id: ").Append(Category1Id).Append("\n");
            sb.Append("  Category2Id: ").Append(Category2Id).Append("\n");
            sb.Append("  Category3Id: ").Append(Category3Id).Append("\n");
            sb.Append("  IEPS: ").Append(IEPS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewProduct);
        }

        /// <summary>
        /// Returns true if NewProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of NewProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewProduct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SKU == input.SKU ||
                    (this.SKU != null &&
                    this.SKU.Equals(input.SKU))
                ) && 
                (
                    this.Category1Id == input.Category1Id ||
                    (this.Category1Id != null &&
                    this.Category1Id.Equals(input.Category1Id))
                ) && 
                (
                    this.Category2Id == input.Category2Id ||
                    (this.Category2Id != null &&
                    this.Category2Id.Equals(input.Category2Id))
                ) && 
                (
                    this.Category3Id == input.Category3Id ||
                    (this.Category3Id != null &&
                    this.Category3Id.Equals(input.Category3Id))
                ) && 
                (
                    this.IEPS == input.IEPS ||
                    (this.IEPS != null &&
                    this.IEPS.Equals(input.IEPS))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SKU != null)
                    hashCode = hashCode * 59 + this.SKU.GetHashCode();
                if (this.Category1Id != null)
                    hashCode = hashCode * 59 + this.Category1Id.GetHashCode();
                if (this.Category2Id != null)
                    hashCode = hashCode * 59 + this.Category2Id.GetHashCode();
                if (this.Category3Id != null)
                    hashCode = hashCode * 59 + this.Category3Id.GetHashCode();
                if (this.IEPS != null)
                    hashCode = hashCode * 59 + this.IEPS.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
