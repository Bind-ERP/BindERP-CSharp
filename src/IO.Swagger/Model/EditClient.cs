/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EditClient
    /// </summary>
    [DataContract]
    public partial class EditClient :  IEquatable<EditClient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditClient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EditClient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EditClient" /> class.
        /// </summary>
        /// <param name="ID">ID (required).</param>
        /// <param name="LegalName">LegalName (required).</param>
        /// <param name="CommercialName">CommercialName (required).</param>
        /// <param name="RFC">RFC (required).</param>
        /// <param name="CreditDays">CreditDays (required).</param>
        /// <param name="CreditAmount">CreditAmount (required).</param>
        /// <param name="PaymentMethod">PaymentMethod.</param>
        /// <param name="PaymentTerm">PaymentTerm.</param>
        /// <param name="LocationID">LocationID.</param>
        /// <param name="SalesEmployeeID">SalesEmployeeID.</param>
        /// <param name="CreditEmployeeID">CreditEmployeeID.</param>
        /// <param name="PriceListID">PriceListID (required).</param>
        /// <param name="Comment">Comment.</param>
        /// <param name="Telephone">Telephone.</param>
        /// <param name="Email">Email.</param>
        /// <param name="AccountNumber">AccountNumber.</param>
        /// <param name="DefaultDiscount">DefaultDiscount.</param>
        /// <param name="Source">Source.</param>
        /// <param name="AccountingNumber">AccountingNumber (required).</param>
        public EditClient(Guid? ID = default(Guid?), string LegalName = default(string), string CommercialName = default(string), string RFC = default(string), int? CreditDays = default(int?), double? CreditAmount = default(double?), int? PaymentMethod = default(int?), int? PaymentTerm = default(int?), Guid? LocationID = default(Guid?), Guid? SalesEmployeeID = default(Guid?), Guid? CreditEmployeeID = default(Guid?), Guid? PriceListID = default(Guid?), string Comment = default(string), string Telephone = default(string), string Email = default(string), string AccountNumber = default(string), double? DefaultDiscount = default(double?), string Source = default(string), string AccountingNumber = default(string))
        {
            // to ensure "ID" is required (not null)
            if (ID == null)
            {
                throw new InvalidDataException("ID is a required property for EditClient and cannot be null");
            }
            else
            {
                this.ID = ID;
            }
            // to ensure "LegalName" is required (not null)
            if (LegalName == null)
            {
                throw new InvalidDataException("LegalName is a required property for EditClient and cannot be null");
            }
            else
            {
                this.LegalName = LegalName;
            }
            // to ensure "CommercialName" is required (not null)
            if (CommercialName == null)
            {
                throw new InvalidDataException("CommercialName is a required property for EditClient and cannot be null");
            }
            else
            {
                this.CommercialName = CommercialName;
            }
            // to ensure "RFC" is required (not null)
            if (RFC == null)
            {
                throw new InvalidDataException("RFC is a required property for EditClient and cannot be null");
            }
            else
            {
                this.RFC = RFC;
            }
            // to ensure "CreditDays" is required (not null)
            if (CreditDays == null)
            {
                throw new InvalidDataException("CreditDays is a required property for EditClient and cannot be null");
            }
            else
            {
                this.CreditDays = CreditDays;
            }
            // to ensure "CreditAmount" is required (not null)
            if (CreditAmount == null)
            {
                throw new InvalidDataException("CreditAmount is a required property for EditClient and cannot be null");
            }
            else
            {
                this.CreditAmount = CreditAmount;
            }
            // to ensure "PriceListID" is required (not null)
            if (PriceListID == null)
            {
                throw new InvalidDataException("PriceListID is a required property for EditClient and cannot be null");
            }
            else
            {
                this.PriceListID = PriceListID;
            }
            // to ensure "AccountingNumber" is required (not null)
            if (AccountingNumber == null)
            {
                throw new InvalidDataException("AccountingNumber is a required property for EditClient and cannot be null");
            }
            else
            {
                this.AccountingNumber = AccountingNumber;
            }
            this.PaymentMethod = PaymentMethod;
            this.PaymentTerm = PaymentTerm;
            this.LocationID = LocationID;
            this.SalesEmployeeID = SalesEmployeeID;
            this.CreditEmployeeID = CreditEmployeeID;
            this.Comment = Comment;
            this.Telephone = Telephone;
            this.Email = Email;
            this.AccountNumber = AccountNumber;
            this.DefaultDiscount = DefaultDiscount;
            this.Source = Source;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public Guid? ID { get; set; }

        /// <summary>
        /// Gets or Sets LegalName
        /// </summary>
        [DataMember(Name="LegalName", EmitDefaultValue=false)]
        public string LegalName { get; set; }

        /// <summary>
        /// Gets or Sets CommercialName
        /// </summary>
        [DataMember(Name="CommercialName", EmitDefaultValue=false)]
        public string CommercialName { get; set; }

        /// <summary>
        /// Gets or Sets RFC
        /// </summary>
        [DataMember(Name="RFC", EmitDefaultValue=false)]
        public string RFC { get; set; }

        /// <summary>
        /// Gets or Sets CreditDays
        /// </summary>
        [DataMember(Name="CreditDays", EmitDefaultValue=false)]
        public int? CreditDays { get; set; }

        /// <summary>
        /// Gets or Sets CreditAmount
        /// </summary>
        [DataMember(Name="CreditAmount", EmitDefaultValue=false)]
        public double? CreditAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public int? PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTerm
        /// </summary>
        [DataMember(Name="PaymentTerm", EmitDefaultValue=false)]
        public int? PaymentTerm { get; set; }

        /// <summary>
        /// Gets or Sets LocationID
        /// </summary>
        [DataMember(Name="LocationID", EmitDefaultValue=false)]
        public Guid? LocationID { get; set; }

        /// <summary>
        /// Gets or Sets SalesEmployeeID
        /// </summary>
        [DataMember(Name="SalesEmployeeID", EmitDefaultValue=false)]
        public Guid? SalesEmployeeID { get; set; }

        /// <summary>
        /// Gets or Sets CreditEmployeeID
        /// </summary>
        [DataMember(Name="CreditEmployeeID", EmitDefaultValue=false)]
        public Guid? CreditEmployeeID { get; set; }

        /// <summary>
        /// Gets or Sets PriceListID
        /// </summary>
        [DataMember(Name="PriceListID", EmitDefaultValue=false)]
        public Guid? PriceListID { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Telephone
        /// </summary>
        [DataMember(Name="Telephone", EmitDefaultValue=false)]
        public string Telephone { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="AccountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDiscount
        /// </summary>
        [DataMember(Name="DefaultDiscount", EmitDefaultValue=false)]
        public double? DefaultDiscount { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets AccountingNumber
        /// </summary>
        [DataMember(Name="AccountingNumber", EmitDefaultValue=false)]
        public string AccountingNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditClient {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  CommercialName: ").Append(CommercialName).Append("\n");
            sb.Append("  RFC: ").Append(RFC).Append("\n");
            sb.Append("  CreditDays: ").Append(CreditDays).Append("\n");
            sb.Append("  CreditAmount: ").Append(CreditAmount).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentTerm: ").Append(PaymentTerm).Append("\n");
            sb.Append("  LocationID: ").Append(LocationID).Append("\n");
            sb.Append("  SalesEmployeeID: ").Append(SalesEmployeeID).Append("\n");
            sb.Append("  CreditEmployeeID: ").Append(CreditEmployeeID).Append("\n");
            sb.Append("  PriceListID: ").Append(PriceListID).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  DefaultDiscount: ").Append(DefaultDiscount).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  AccountingNumber: ").Append(AccountingNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditClient);
        }

        /// <summary>
        /// Returns true if EditClient instances are equal
        /// </summary>
        /// <param name="input">Instance of EditClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditClient input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.CommercialName == input.CommercialName ||
                    (this.CommercialName != null &&
                    this.CommercialName.Equals(input.CommercialName))
                ) && 
                (
                    this.RFC == input.RFC ||
                    (this.RFC != null &&
                    this.RFC.Equals(input.RFC))
                ) && 
                (
                    this.CreditDays == input.CreditDays ||
                    (this.CreditDays != null &&
                    this.CreditDays.Equals(input.CreditDays))
                ) && 
                (
                    this.CreditAmount == input.CreditAmount ||
                    (this.CreditAmount != null &&
                    this.CreditAmount.Equals(input.CreditAmount))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PaymentTerm == input.PaymentTerm ||
                    (this.PaymentTerm != null &&
                    this.PaymentTerm.Equals(input.PaymentTerm))
                ) && 
                (
                    this.LocationID == input.LocationID ||
                    (this.LocationID != null &&
                    this.LocationID.Equals(input.LocationID))
                ) && 
                (
                    this.SalesEmployeeID == input.SalesEmployeeID ||
                    (this.SalesEmployeeID != null &&
                    this.SalesEmployeeID.Equals(input.SalesEmployeeID))
                ) && 
                (
                    this.CreditEmployeeID == input.CreditEmployeeID ||
                    (this.CreditEmployeeID != null &&
                    this.CreditEmployeeID.Equals(input.CreditEmployeeID))
                ) && 
                (
                    this.PriceListID == input.PriceListID ||
                    (this.PriceListID != null &&
                    this.PriceListID.Equals(input.PriceListID))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Telephone == input.Telephone ||
                    (this.Telephone != null &&
                    this.Telephone.Equals(input.Telephone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.DefaultDiscount == input.DefaultDiscount ||
                    (this.DefaultDiscount != null &&
                    this.DefaultDiscount.Equals(input.DefaultDiscount))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.AccountingNumber == input.AccountingNumber ||
                    (this.AccountingNumber != null &&
                    this.AccountingNumber.Equals(input.AccountingNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.LegalName != null)
                    hashCode = hashCode * 59 + this.LegalName.GetHashCode();
                if (this.CommercialName != null)
                    hashCode = hashCode * 59 + this.CommercialName.GetHashCode();
                if (this.RFC != null)
                    hashCode = hashCode * 59 + this.RFC.GetHashCode();
                if (this.CreditDays != null)
                    hashCode = hashCode * 59 + this.CreditDays.GetHashCode();
                if (this.CreditAmount != null)
                    hashCode = hashCode * 59 + this.CreditAmount.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentTerm != null)
                    hashCode = hashCode * 59 + this.PaymentTerm.GetHashCode();
                if (this.LocationID != null)
                    hashCode = hashCode * 59 + this.LocationID.GetHashCode();
                if (this.SalesEmployeeID != null)
                    hashCode = hashCode * 59 + this.SalesEmployeeID.GetHashCode();
                if (this.CreditEmployeeID != null)
                    hashCode = hashCode * 59 + this.CreditEmployeeID.GetHashCode();
                if (this.PriceListID != null)
                    hashCode = hashCode * 59 + this.PriceListID.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Telephone != null)
                    hashCode = hashCode * 59 + this.Telephone.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.DefaultDiscount != null)
                    hashCode = hashCode * 59 + this.DefaultDiscount.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.AccountingNumber != null)
                    hashCode = hashCode * 59 + this.AccountingNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RFC (string) pattern
            Regex regexRFC = new Regex(@"[A-Z,a-z,ñ,Ñ,&]{3,4}[0-9]{2}[0-1][0-9][0-3][0-9][A-Z,a-z,0-9]?[A-Z,a-z,0-9]?[0-9,A-Z,a-z]?", RegexOptions.CultureInvariant);
            if (false == regexRFC.Match(this.RFC).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RFC, must match a pattern of " + regexRFC, new [] { "RFC" });
            }

            yield break;
        }
    }

}
