/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExpensePurchaseOrderItem
    /// </summary>
    [DataContract]
    public partial class ExpensePurchaseOrderItem :  IEquatable<ExpensePurchaseOrderItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpensePurchaseOrderItem" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="Qty">Qty.</param>
        /// <param name="Cost">Cost.</param>
        /// <param name="TypeID">TypeID.</param>
        /// <param name="Name">Name.</param>
        /// <param name="ExpensePurchaseOrderID">ExpensePurchaseOrderID.</param>
        /// <param name="IndexItem">IndexItem.</param>
        /// <param name="SATCompanyAccountID">SATCompanyAccountID.</param>
        public ExpensePurchaseOrderItem(Guid? ID = default(Guid?), double? Qty = default(double?), double? Cost = default(double?), Guid? TypeID = default(Guid?), string Name = default(string), Guid? ExpensePurchaseOrderID = default(Guid?), int? IndexItem = default(int?), Guid? SATCompanyAccountID = default(Guid?))
        {
            this.ID = ID;
            this.Qty = Qty;
            this.Cost = Cost;
            this.TypeID = TypeID;
            this.Name = Name;
            this.ExpensePurchaseOrderID = ExpensePurchaseOrderID;
            this.IndexItem = IndexItem;
            this.SATCompanyAccountID = SATCompanyAccountID;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public Guid? ID { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="Qty", EmitDefaultValue=false)]
        public double? Qty { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="Cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets TypeID
        /// </summary>
        [DataMember(Name="TypeID", EmitDefaultValue=false)]
        public Guid? TypeID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ExpensePurchaseOrderID
        /// </summary>
        [DataMember(Name="ExpensePurchaseOrderID", EmitDefaultValue=false)]
        public Guid? ExpensePurchaseOrderID { get; set; }

        /// <summary>
        /// Gets or Sets IndexItem
        /// </summary>
        [DataMember(Name="IndexItem", EmitDefaultValue=false)]
        public int? IndexItem { get; set; }

        /// <summary>
        /// Gets or Sets SATCompanyAccountID
        /// </summary>
        [DataMember(Name="SATCompanyAccountID", EmitDefaultValue=false)]
        public Guid? SATCompanyAccountID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpensePurchaseOrderItem {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  TypeID: ").Append(TypeID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExpensePurchaseOrderID: ").Append(ExpensePurchaseOrderID).Append("\n");
            sb.Append("  IndexItem: ").Append(IndexItem).Append("\n");
            sb.Append("  SATCompanyAccountID: ").Append(SATCompanyAccountID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpensePurchaseOrderItem);
        }

        /// <summary>
        /// Returns true if ExpensePurchaseOrderItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpensePurchaseOrderItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpensePurchaseOrderItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.Qty == input.Qty ||
                    (this.Qty != null &&
                    this.Qty.Equals(input.Qty))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.TypeID == input.TypeID ||
                    (this.TypeID != null &&
                    this.TypeID.Equals(input.TypeID))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ExpensePurchaseOrderID == input.ExpensePurchaseOrderID ||
                    (this.ExpensePurchaseOrderID != null &&
                    this.ExpensePurchaseOrderID.Equals(input.ExpensePurchaseOrderID))
                ) && 
                (
                    this.IndexItem == input.IndexItem ||
                    (this.IndexItem != null &&
                    this.IndexItem.Equals(input.IndexItem))
                ) && 
                (
                    this.SATCompanyAccountID == input.SATCompanyAccountID ||
                    (this.SATCompanyAccountID != null &&
                    this.SATCompanyAccountID.Equals(input.SATCompanyAccountID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.Qty != null)
                    hashCode = hashCode * 59 + this.Qty.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.TypeID != null)
                    hashCode = hashCode * 59 + this.TypeID.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ExpensePurchaseOrderID != null)
                    hashCode = hashCode * 59 + this.ExpensePurchaseOrderID.GetHashCode();
                if (this.IndexItem != null)
                    hashCode = hashCode * 59 + this.IndexItem.GetHashCode();
                if (this.SATCompanyAccountID != null)
                    hashCode = hashCode * 59 + this.SATCompanyAccountID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
