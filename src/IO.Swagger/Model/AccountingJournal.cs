/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AccountingJournal
    /// </summary>
    [DataContract]
    public partial class AccountingJournal :  IEquatable<AccountingJournal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountingJournal" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="DocumentID">DocumentID.</param>
        /// <param name="Type">Type.</param>
        /// <param name="ApplicationDate">ApplicationDate.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="Number">Number.</param>
        /// <param name="LocationID">LocationID.</param>
        /// <param name="PeriodType">PeriodType.</param>
        /// <param name="Items">Items.</param>
        public AccountingJournal(Guid? ID = default(Guid?), Guid? DocumentID = default(Guid?), string Type = default(string), DateTime? ApplicationDate = default(DateTime?), DateTime? CreationDate = default(DateTime?), int? Number = default(int?), Guid? LocationID = default(Guid?), string PeriodType = default(string), List<AccountingJournalItem> Items = default(List<AccountingJournalItem>))
        {
            this.ID = ID;
            this.DocumentID = DocumentID;
            this.Type = Type;
            this.ApplicationDate = ApplicationDate;
            this.CreationDate = CreationDate;
            this.Number = Number;
            this.LocationID = LocationID;
            this.PeriodType = PeriodType;
            this.Items = Items;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public Guid? ID { get; set; }

        /// <summary>
        /// Gets or Sets DocumentID
        /// </summary>
        [DataMember(Name="DocumentID", EmitDefaultValue=false)]
        public Guid? DocumentID { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationDate
        /// </summary>
        [DataMember(Name="ApplicationDate", EmitDefaultValue=false)]
        public DateTime? ApplicationDate { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="CreationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or Sets LocationID
        /// </summary>
        [DataMember(Name="LocationID", EmitDefaultValue=false)]
        public Guid? LocationID { get; set; }

        /// <summary>
        /// Gets or Sets PeriodType
        /// </summary>
        [DataMember(Name="PeriodType", EmitDefaultValue=false)]
        public string PeriodType { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="Items", EmitDefaultValue=false)]
        public List<AccountingJournalItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountingJournal {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  DocumentID: ").Append(DocumentID).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ApplicationDate: ").Append(ApplicationDate).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  LocationID: ").Append(LocationID).Append("\n");
            sb.Append("  PeriodType: ").Append(PeriodType).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountingJournal);
        }

        /// <summary>
        /// Returns true if AccountingJournal instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountingJournal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountingJournal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.DocumentID == input.DocumentID ||
                    (this.DocumentID != null &&
                    this.DocumentID.Equals(input.DocumentID))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ApplicationDate == input.ApplicationDate ||
                    (this.ApplicationDate != null &&
                    this.ApplicationDate.Equals(input.ApplicationDate))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.LocationID == input.LocationID ||
                    (this.LocationID != null &&
                    this.LocationID.Equals(input.LocationID))
                ) && 
                (
                    this.PeriodType == input.PeriodType ||
                    (this.PeriodType != null &&
                    this.PeriodType.Equals(input.PeriodType))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.DocumentID != null)
                    hashCode = hashCode * 59 + this.DocumentID.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ApplicationDate != null)
                    hashCode = hashCode * 59 + this.ApplicationDate.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.LocationID != null)
                    hashCode = hashCode * 59 + this.LocationID.GetHashCode();
                if (this.PeriodType != null)
                    hashCode = hashCode * 59 + this.PeriodType.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
