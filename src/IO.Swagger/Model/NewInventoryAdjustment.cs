/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NewInventoryAdjustment
    /// </summary>
    [DataContract]
    public partial class NewInventoryAdjustment :  IEquatable<NewInventoryAdjustment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewInventoryAdjustment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewInventoryAdjustment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewInventoryAdjustment" /> class.
        /// </summary>
        /// <param name="ProductID">ProductID (required).</param>
        /// <param name="WarehouseID">WarehouseID (required).</param>
        /// <param name="LotImportID">LotImportID.</param>
        /// <param name="AdjustQty">AdjustQty (required).</param>
        /// <param name="Date">Date (required).</param>
        /// <param name="Comments">Comments (required).</param>
        /// <param name="AccountingAccountID">AccountingAccountID.</param>
        public NewInventoryAdjustment(Guid? ProductID = default(Guid?), Guid? WarehouseID = default(Guid?), Guid? LotImportID = default(Guid?), double? AdjustQty = default(double?), string Date = default(string), string Comments = default(string), Guid? AccountingAccountID = default(Guid?))
        {
            // to ensure "ProductID" is required (not null)
            if (ProductID == null)
            {
                throw new InvalidDataException("ProductID is a required property for NewInventoryAdjustment and cannot be null");
            }
            else
            {
                this.ProductID = ProductID;
            }
            // to ensure "WarehouseID" is required (not null)
            if (WarehouseID == null)
            {
                throw new InvalidDataException("WarehouseID is a required property for NewInventoryAdjustment and cannot be null");
            }
            else
            {
                this.WarehouseID = WarehouseID;
            }
            // to ensure "AdjustQty" is required (not null)
            if (AdjustQty == null)
            {
                throw new InvalidDataException("AdjustQty is a required property for NewInventoryAdjustment and cannot be null");
            }
            else
            {
                this.AdjustQty = AdjustQty;
            }
            // to ensure "Date" is required (not null)
            if (Date == null)
            {
                throw new InvalidDataException("Date is a required property for NewInventoryAdjustment and cannot be null");
            }
            else
            {
                this.Date = Date;
            }
            // to ensure "Comments" is required (not null)
            if (Comments == null)
            {
                throw new InvalidDataException("Comments is a required property for NewInventoryAdjustment and cannot be null");
            }
            else
            {
                this.Comments = Comments;
            }
            this.LotImportID = LotImportID;
            this.AccountingAccountID = AccountingAccountID;
        }
        
        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="ProductID", EmitDefaultValue=false)]
        public Guid? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseID
        /// </summary>
        [DataMember(Name="WarehouseID", EmitDefaultValue=false)]
        public Guid? WarehouseID { get; set; }

        /// <summary>
        /// Gets or Sets LotImportID
        /// </summary>
        [DataMember(Name="LotImportID", EmitDefaultValue=false)]
        public Guid? LotImportID { get; set; }

        /// <summary>
        /// Gets or Sets AdjustQty
        /// </summary>
        [DataMember(Name="AdjustQty", EmitDefaultValue=false)]
        public double? AdjustQty { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="Comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets AccountingAccountID
        /// </summary>
        [DataMember(Name="AccountingAccountID", EmitDefaultValue=false)]
        public Guid? AccountingAccountID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewInventoryAdjustment {\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  WarehouseID: ").Append(WarehouseID).Append("\n");
            sb.Append("  LotImportID: ").Append(LotImportID).Append("\n");
            sb.Append("  AdjustQty: ").Append(AdjustQty).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  AccountingAccountID: ").Append(AccountingAccountID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewInventoryAdjustment);
        }

        /// <summary>
        /// Returns true if NewInventoryAdjustment instances are equal
        /// </summary>
        /// <param name="input">Instance of NewInventoryAdjustment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewInventoryAdjustment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductID == input.ProductID ||
                    (this.ProductID != null &&
                    this.ProductID.Equals(input.ProductID))
                ) && 
                (
                    this.WarehouseID == input.WarehouseID ||
                    (this.WarehouseID != null &&
                    this.WarehouseID.Equals(input.WarehouseID))
                ) && 
                (
                    this.LotImportID == input.LotImportID ||
                    (this.LotImportID != null &&
                    this.LotImportID.Equals(input.LotImportID))
                ) && 
                (
                    this.AdjustQty == input.AdjustQty ||
                    (this.AdjustQty != null &&
                    this.AdjustQty.Equals(input.AdjustQty))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.AccountingAccountID == input.AccountingAccountID ||
                    (this.AccountingAccountID != null &&
                    this.AccountingAccountID.Equals(input.AccountingAccountID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductID != null)
                    hashCode = hashCode * 59 + this.ProductID.GetHashCode();
                if (this.WarehouseID != null)
                    hashCode = hashCode * 59 + this.WarehouseID.GetHashCode();
                if (this.LotImportID != null)
                    hashCode = hashCode * 59 + this.LotImportID.GetHashCode();
                if (this.AdjustQty != null)
                    hashCode = hashCode * 59 + this.AdjustQty.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.AccountingAccountID != null)
                    hashCode = hashCode * 59 + this.AccountingAccountID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
