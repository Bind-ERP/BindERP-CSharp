/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PaymentListItem
    /// </summary>
    [DataContract]
    public partial class PaymentListItem :  IEquatable<PaymentListItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentListItem" /> class.
        /// </summary>
        /// <param name="AccountMovementID">AccountMovementID.</param>
        /// <param name="AccountMovementNumber">AccountMovementNumber.</param>
        /// <param name="ApplicationDate">ApplicationDate.</param>
        /// <param name="Comments">Comments.</param>
        /// <param name="Employee">Employee.</param>
        /// <param name="ExchangeRate">ExchangeRate.</param>
        /// <param name="ExternalID">ExternalID.</param>
        /// <param name="HasCancellationXML">HasCancellationXML.</param>
        /// <param name="ID">ID.</param>
        /// <param name="StatusCode">StatusCode.</param>
        /// <param name="Account">Account.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="HasAccountingOperation">HasAccountingOperation.</param>
        public PaymentListItem(Guid? AccountMovementID = default(Guid?), int? AccountMovementNumber = default(int?), DateTime? ApplicationDate = default(DateTime?), string Comments = default(string), string Employee = default(string), double? ExchangeRate = default(double?), Guid? ExternalID = default(Guid?), bool? HasCancellationXML = default(bool?), Guid? ID = default(Guid?), int? StatusCode = default(int?), string Account = default(string), double? Amount = default(double?), bool? HasAccountingOperation = default(bool?))
        {
            this.AccountMovementID = AccountMovementID;
            this.AccountMovementNumber = AccountMovementNumber;
            this.ApplicationDate = ApplicationDate;
            this.Comments = Comments;
            this.Employee = Employee;
            this.ExchangeRate = ExchangeRate;
            this.ExternalID = ExternalID;
            this.HasCancellationXML = HasCancellationXML;
            this.ID = ID;
            this.StatusCode = StatusCode;
            this.Account = Account;
            this.Amount = Amount;
            this.HasAccountingOperation = HasAccountingOperation;
        }
        
        /// <summary>
        /// Gets or Sets AccountMovementID
        /// </summary>
        [DataMember(Name="AccountMovementID", EmitDefaultValue=false)]
        public Guid? AccountMovementID { get; set; }

        /// <summary>
        /// Gets or Sets AccountMovementNumber
        /// </summary>
        [DataMember(Name="AccountMovementNumber", EmitDefaultValue=false)]
        public int? AccountMovementNumber { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationDate
        /// </summary>
        [DataMember(Name="ApplicationDate", EmitDefaultValue=false)]
        public DateTime? ApplicationDate { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="Comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets Employee
        /// </summary>
        [DataMember(Name="Employee", EmitDefaultValue=false)]
        public string Employee { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="ExchangeRate", EmitDefaultValue=false)]
        public double? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets ExternalID
        /// </summary>
        [DataMember(Name="ExternalID", EmitDefaultValue=false)]
        public Guid? ExternalID { get; set; }

        /// <summary>
        /// Gets or Sets HasCancellationXML
        /// </summary>
        [DataMember(Name="HasCancellationXML", EmitDefaultValue=false)]
        public bool? HasCancellationXML { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public Guid? ID { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="StatusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="Account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets HasAccountingOperation
        /// </summary>
        [DataMember(Name="HasAccountingOperation", EmitDefaultValue=false)]
        public bool? HasAccountingOperation { get; set; }

        /// <summary>
        /// Gets or Sets StatusText
        /// </summary>
        [DataMember(Name="StatusText", EmitDefaultValue=false)]
        public string StatusText { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentListItem {\n");
            sb.Append("  AccountMovementID: ").Append(AccountMovementID).Append("\n");
            sb.Append("  AccountMovementNumber: ").Append(AccountMovementNumber).Append("\n");
            sb.Append("  ApplicationDate: ").Append(ApplicationDate).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Employee: ").Append(Employee).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  ExternalID: ").Append(ExternalID).Append("\n");
            sb.Append("  HasCancellationXML: ").Append(HasCancellationXML).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  HasAccountingOperation: ").Append(HasAccountingOperation).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentListItem);
        }

        /// <summary>
        /// Returns true if PaymentListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentListItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountMovementID == input.AccountMovementID ||
                    (this.AccountMovementID != null &&
                    this.AccountMovementID.Equals(input.AccountMovementID))
                ) && 
                (
                    this.AccountMovementNumber == input.AccountMovementNumber ||
                    (this.AccountMovementNumber != null &&
                    this.AccountMovementNumber.Equals(input.AccountMovementNumber))
                ) && 
                (
                    this.ApplicationDate == input.ApplicationDate ||
                    (this.ApplicationDate != null &&
                    this.ApplicationDate.Equals(input.ApplicationDate))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Employee == input.Employee ||
                    (this.Employee != null &&
                    this.Employee.Equals(input.Employee))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.ExternalID == input.ExternalID ||
                    (this.ExternalID != null &&
                    this.ExternalID.Equals(input.ExternalID))
                ) && 
                (
                    this.HasCancellationXML == input.HasCancellationXML ||
                    (this.HasCancellationXML != null &&
                    this.HasCancellationXML.Equals(input.HasCancellationXML))
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.HasAccountingOperation == input.HasAccountingOperation ||
                    (this.HasAccountingOperation != null &&
                    this.HasAccountingOperation.Equals(input.HasAccountingOperation))
                ) && 
                (
                    this.StatusText == input.StatusText ||
                    (this.StatusText != null &&
                    this.StatusText.Equals(input.StatusText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountMovementID != null)
                    hashCode = hashCode * 59 + this.AccountMovementID.GetHashCode();
                if (this.AccountMovementNumber != null)
                    hashCode = hashCode * 59 + this.AccountMovementNumber.GetHashCode();
                if (this.ApplicationDate != null)
                    hashCode = hashCode * 59 + this.ApplicationDate.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Employee != null)
                    hashCode = hashCode * 59 + this.Employee.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.ExternalID != null)
                    hashCode = hashCode * 59 + this.ExternalID.GetHashCode();
                if (this.HasCancellationXML != null)
                    hashCode = hashCode * 59 + this.HasCancellationXML.GetHashCode();
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.HasAccountingOperation != null)
                    hashCode = hashCode * 59 + this.HasAccountingOperation.GetHashCode();
                if (this.StatusText != null)
                    hashCode = hashCode * 59 + this.StatusText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
