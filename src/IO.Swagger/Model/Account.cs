/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract]
    public partial class Account :  IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="GLGroup">GLGroup.</param>
        /// <param name="Group">Group.</param>
        /// <param name="SubGroup">SubGroup.</param>
        /// <param name="GLGroupID">GLGroupID.</param>
        /// <param name="GroupID">GroupID.</param>
        /// <param name="SubGroupID">SubGroupID.</param>
        /// <param name="Number">Number.</param>
        /// <param name="Description">Description.</param>
        public Account(Guid? ID = default(Guid?), string GLGroup = default(string), string Group = default(string), string SubGroup = default(string), Guid? GLGroupID = default(Guid?), Guid? GroupID = default(Guid?), Guid? SubGroupID = default(Guid?), string Number = default(string), string Description = default(string))
        {
            this.ID = ID;
            this.GLGroup = GLGroup;
            this.Group = Group;
            this.SubGroup = SubGroup;
            this.GLGroupID = GLGroupID;
            this.GroupID = GroupID;
            this.SubGroupID = SubGroupID;
            this.Number = Number;
            this.Description = Description;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public Guid? ID { get; set; }

        /// <summary>
        /// Gets or Sets GLGroup
        /// </summary>
        [DataMember(Name="GLGroup", EmitDefaultValue=false)]
        public string GLGroup { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="Group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets SubGroup
        /// </summary>
        [DataMember(Name="SubGroup", EmitDefaultValue=false)]
        public string SubGroup { get; set; }

        /// <summary>
        /// Gets or Sets GLGroupID
        /// </summary>
        [DataMember(Name="GLGroupID", EmitDefaultValue=false)]
        public Guid? GLGroupID { get; set; }

        /// <summary>
        /// Gets or Sets GroupID
        /// </summary>
        [DataMember(Name="GroupID", EmitDefaultValue=false)]
        public Guid? GroupID { get; set; }

        /// <summary>
        /// Gets or Sets SubGroupID
        /// </summary>
        [DataMember(Name="SubGroupID", EmitDefaultValue=false)]
        public Guid? SubGroupID { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  GLGroup: ").Append(GLGroup).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  SubGroup: ").Append(SubGroup).Append("\n");
            sb.Append("  GLGroupID: ").Append(GLGroupID).Append("\n");
            sb.Append("  GroupID: ").Append(GroupID).Append("\n");
            sb.Append("  SubGroupID: ").Append(SubGroupID).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.GLGroup == input.GLGroup ||
                    (this.GLGroup != null &&
                    this.GLGroup.Equals(input.GLGroup))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.SubGroup == input.SubGroup ||
                    (this.SubGroup != null &&
                    this.SubGroup.Equals(input.SubGroup))
                ) && 
                (
                    this.GLGroupID == input.GLGroupID ||
                    (this.GLGroupID != null &&
                    this.GLGroupID.Equals(input.GLGroupID))
                ) && 
                (
                    this.GroupID == input.GroupID ||
                    (this.GroupID != null &&
                    this.GroupID.Equals(input.GroupID))
                ) && 
                (
                    this.SubGroupID == input.SubGroupID ||
                    (this.SubGroupID != null &&
                    this.SubGroupID.Equals(input.SubGroupID))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.GLGroup != null)
                    hashCode = hashCode * 59 + this.GLGroup.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.SubGroup != null)
                    hashCode = hashCode * 59 + this.SubGroup.GetHashCode();
                if (this.GLGroupID != null)
                    hashCode = hashCode * 59 + this.GLGroupID.GetHashCode();
                if (this.GroupID != null)
                    hashCode = hashCode * 59 + this.GroupID.GetHashCode();
                if (this.SubGroupID != null)
                    hashCode = hashCode * 59 + this.SubGroupID.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
