/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExpenseDetails
    /// </summary>
    [DataContract]
    public partial class ExpenseDetails :  IEquatable<ExpenseDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseDetails" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="ProviderID">ProviderID.</param>
        /// <param name="ProviderName">ProviderName.</param>
        /// <param name="Status">Status.</param>
        /// <param name="StatusCode">StatusCode.</param>
        /// <param name="CreationDate">CreationDate.</param>
        /// <param name="CreditDays">CreditDays.</param>
        /// <param name="LocationID">LocationID.</param>
        /// <param name="ClientID">ClientID.</param>
        /// <param name="DepartmentID">DepartmentID.</param>
        /// <param name="DocumentType">DocumentType.</param>
        /// <param name="DocumentNumber">DocumentNumber.</param>
        /// <param name="Comments">Comments.</param>
        /// <param name="VAT">VAT.</param>
        /// <param name="InvoiceID">InvoiceID.</param>
        /// <param name="CurrencyID">CurrencyID.</param>
        /// <param name="ExchangeRate">ExchangeRate.</param>
        /// <param name="UUID">UUID.</param>
        /// <param name="Series">Series.</param>
        /// <param name="VATRetention">VATRetention.</param>
        /// <param name="ISRRetention">ISRRetention.</param>
        /// <param name="IEPS">IEPS.</param>
        /// <param name="Discount">Discount.</param>
        /// <param name="FiscalID">FiscalID.</param>
        /// <param name="ISRRetType">ISRRetType.</param>
        /// <param name="RFC">RFC.</param>
        /// <param name="ExpensePurchaseOrderItems">ExpensePurchaseOrderItems.</param>
        public ExpenseDetails(Guid? ID = default(Guid?), Guid? ProviderID = default(Guid?), string ProviderName = default(string), string Status = default(string), int? StatusCode = default(int?), DateTime? CreationDate = default(DateTime?), int? CreditDays = default(int?), Guid? LocationID = default(Guid?), Guid? ClientID = default(Guid?), Guid? DepartmentID = default(Guid?), int? DocumentType = default(int?), string DocumentNumber = default(string), string Comments = default(string), double? VAT = default(double?), Guid? InvoiceID = default(Guid?), Guid? CurrencyID = default(Guid?), double? ExchangeRate = default(double?), string UUID = default(string), string Series = default(string), double? VATRetention = default(double?), double? ISRRetention = default(double?), double? IEPS = default(double?), double? Discount = default(double?), Guid? FiscalID = default(Guid?), int? ISRRetType = default(int?), string RFC = default(string), List<ExpensePurchaseOrderItem> ExpensePurchaseOrderItems = default(List<ExpensePurchaseOrderItem>))
        {
            this.ID = ID;
            this.ProviderID = ProviderID;
            this.ProviderName = ProviderName;
            this.Status = Status;
            this.StatusCode = StatusCode;
            this.CreationDate = CreationDate;
            this.CreditDays = CreditDays;
            this.LocationID = LocationID;
            this.ClientID = ClientID;
            this.DepartmentID = DepartmentID;
            this.DocumentType = DocumentType;
            this.DocumentNumber = DocumentNumber;
            this.Comments = Comments;
            this.VAT = VAT;
            this.InvoiceID = InvoiceID;
            this.CurrencyID = CurrencyID;
            this.ExchangeRate = ExchangeRate;
            this.UUID = UUID;
            this.Series = Series;
            this.VATRetention = VATRetention;
            this.ISRRetention = ISRRetention;
            this.IEPS = IEPS;
            this.Discount = Discount;
            this.FiscalID = FiscalID;
            this.ISRRetType = ISRRetType;
            this.RFC = RFC;
            this.ExpensePurchaseOrderItems = ExpensePurchaseOrderItems;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public Guid? ID { get; set; }

        /// <summary>
        /// Gets or Sets ProviderID
        /// </summary>
        [DataMember(Name="ProviderID", EmitDefaultValue=false)]
        public Guid? ProviderID { get; set; }

        /// <summary>
        /// Gets or Sets ProviderName
        /// </summary>
        [DataMember(Name="ProviderName", EmitDefaultValue=false)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="StatusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="CreationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets CreditDays
        /// </summary>
        [DataMember(Name="CreditDays", EmitDefaultValue=false)]
        public int? CreditDays { get; set; }

        /// <summary>
        /// Gets or Sets LocationID
        /// </summary>
        [DataMember(Name="LocationID", EmitDefaultValue=false)]
        public Guid? LocationID { get; set; }

        /// <summary>
        /// Gets or Sets ClientID
        /// </summary>
        [DataMember(Name="ClientID", EmitDefaultValue=false)]
        public Guid? ClientID { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentID
        /// </summary>
        [DataMember(Name="DepartmentID", EmitDefaultValue=false)]
        public Guid? DepartmentID { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="DocumentType", EmitDefaultValue=false)]
        public int? DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets DocumentNumber
        /// </summary>
        [DataMember(Name="DocumentNumber", EmitDefaultValue=false)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="Comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets VAT
        /// </summary>
        [DataMember(Name="VAT", EmitDefaultValue=false)]
        public double? VAT { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceID
        /// </summary>
        [DataMember(Name="InvoiceID", EmitDefaultValue=false)]
        public Guid? InvoiceID { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public Guid? CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="ExchangeRate", EmitDefaultValue=false)]
        public double? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets UUID
        /// </summary>
        [DataMember(Name="UUID", EmitDefaultValue=false)]
        public string UUID { get; set; }

        /// <summary>
        /// Gets or Sets Series
        /// </summary>
        [DataMember(Name="Series", EmitDefaultValue=false)]
        public string Series { get; set; }

        /// <summary>
        /// Gets or Sets VATRetention
        /// </summary>
        [DataMember(Name="VATRetention", EmitDefaultValue=false)]
        public double? VATRetention { get; set; }

        /// <summary>
        /// Gets or Sets ISRRetention
        /// </summary>
        [DataMember(Name="ISRRetention", EmitDefaultValue=false)]
        public double? ISRRetention { get; set; }

        /// <summary>
        /// Gets or Sets IEPS
        /// </summary>
        [DataMember(Name="IEPS", EmitDefaultValue=false)]
        public double? IEPS { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name="Discount", EmitDefaultValue=false)]
        public double? Discount { get; set; }

        /// <summary>
        /// Gets or Sets FiscalID
        /// </summary>
        [DataMember(Name="FiscalID", EmitDefaultValue=false)]
        public Guid? FiscalID { get; set; }

        /// <summary>
        /// Gets or Sets ISRRetType
        /// </summary>
        [DataMember(Name="ISRRetType", EmitDefaultValue=false)]
        public int? ISRRetType { get; set; }

        /// <summary>
        /// Gets or Sets RFC
        /// </summary>
        [DataMember(Name="RFC", EmitDefaultValue=false)]
        public string RFC { get; set; }

        /// <summary>
        /// Gets or Sets ExpensePurchaseOrderItems
        /// </summary>
        [DataMember(Name="ExpensePurchaseOrderItems", EmitDefaultValue=false)]
        public List<ExpensePurchaseOrderItem> ExpensePurchaseOrderItems { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeText
        /// </summary>
        [DataMember(Name="DocumentTypeText", EmitDefaultValue=false)]
        public string DocumentTypeText { get; private set; }

        /// <summary>
        /// Gets or Sets CurrencyName
        /// </summary>
        [DataMember(Name="CurrencyName", EmitDefaultValue=false)]
        public string CurrencyName { get; private set; }

        /// <summary>
        /// Gets or Sets ClientName
        /// </summary>
        [DataMember(Name="ClientName", EmitDefaultValue=false)]
        public string ClientName { get; private set; }

        /// <summary>
        /// Gets or Sets LocationName
        /// </summary>
        [DataMember(Name="LocationName", EmitDefaultValue=false)]
        public string LocationName { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpenseDetails {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  ProviderID: ").Append(ProviderID).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CreditDays: ").Append(CreditDays).Append("\n");
            sb.Append("  LocationID: ").Append(LocationID).Append("\n");
            sb.Append("  ClientID: ").Append(ClientID).Append("\n");
            sb.Append("  DepartmentID: ").Append(DepartmentID).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  VAT: ").Append(VAT).Append("\n");
            sb.Append("  InvoiceID: ").Append(InvoiceID).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  UUID: ").Append(UUID).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  VATRetention: ").Append(VATRetention).Append("\n");
            sb.Append("  ISRRetention: ").Append(ISRRetention).Append("\n");
            sb.Append("  IEPS: ").Append(IEPS).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  FiscalID: ").Append(FiscalID).Append("\n");
            sb.Append("  ISRRetType: ").Append(ISRRetType).Append("\n");
            sb.Append("  RFC: ").Append(RFC).Append("\n");
            sb.Append("  ExpensePurchaseOrderItems: ").Append(ExpensePurchaseOrderItems).Append("\n");
            sb.Append("  DocumentTypeText: ").Append(DocumentTypeText).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  ClientName: ").Append(ClientName).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseDetails);
        }

        /// <summary>
        /// Returns true if ExpenseDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.ProviderID == input.ProviderID ||
                    (this.ProviderID != null &&
                    this.ProviderID.Equals(input.ProviderID))
                ) && 
                (
                    this.ProviderName == input.ProviderName ||
                    (this.ProviderName != null &&
                    this.ProviderName.Equals(input.ProviderName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.CreditDays == input.CreditDays ||
                    (this.CreditDays != null &&
                    this.CreditDays.Equals(input.CreditDays))
                ) && 
                (
                    this.LocationID == input.LocationID ||
                    (this.LocationID != null &&
                    this.LocationID.Equals(input.LocationID))
                ) && 
                (
                    this.ClientID == input.ClientID ||
                    (this.ClientID != null &&
                    this.ClientID.Equals(input.ClientID))
                ) && 
                (
                    this.DepartmentID == input.DepartmentID ||
                    (this.DepartmentID != null &&
                    this.DepartmentID.Equals(input.DepartmentID))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.DocumentNumber == input.DocumentNumber ||
                    (this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(input.DocumentNumber))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.VAT == input.VAT ||
                    (this.VAT != null &&
                    this.VAT.Equals(input.VAT))
                ) && 
                (
                    this.InvoiceID == input.InvoiceID ||
                    (this.InvoiceID != null &&
                    this.InvoiceID.Equals(input.InvoiceID))
                ) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.UUID == input.UUID ||
                    (this.UUID != null &&
                    this.UUID.Equals(input.UUID))
                ) && 
                (
                    this.Series == input.Series ||
                    (this.Series != null &&
                    this.Series.Equals(input.Series))
                ) && 
                (
                    this.VATRetention == input.VATRetention ||
                    (this.VATRetention != null &&
                    this.VATRetention.Equals(input.VATRetention))
                ) && 
                (
                    this.ISRRetention == input.ISRRetention ||
                    (this.ISRRetention != null &&
                    this.ISRRetention.Equals(input.ISRRetention))
                ) && 
                (
                    this.IEPS == input.IEPS ||
                    (this.IEPS != null &&
                    this.IEPS.Equals(input.IEPS))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.FiscalID == input.FiscalID ||
                    (this.FiscalID != null &&
                    this.FiscalID.Equals(input.FiscalID))
                ) && 
                (
                    this.ISRRetType == input.ISRRetType ||
                    (this.ISRRetType != null &&
                    this.ISRRetType.Equals(input.ISRRetType))
                ) && 
                (
                    this.RFC == input.RFC ||
                    (this.RFC != null &&
                    this.RFC.Equals(input.RFC))
                ) && 
                (
                    this.ExpensePurchaseOrderItems == input.ExpensePurchaseOrderItems ||
                    this.ExpensePurchaseOrderItems != null &&
                    this.ExpensePurchaseOrderItems.SequenceEqual(input.ExpensePurchaseOrderItems)
                ) && 
                (
                    this.DocumentTypeText == input.DocumentTypeText ||
                    (this.DocumentTypeText != null &&
                    this.DocumentTypeText.Equals(input.DocumentTypeText))
                ) && 
                (
                    this.CurrencyName == input.CurrencyName ||
                    (this.CurrencyName != null &&
                    this.CurrencyName.Equals(input.CurrencyName))
                ) && 
                (
                    this.ClientName == input.ClientName ||
                    (this.ClientName != null &&
                    this.ClientName.Equals(input.ClientName))
                ) && 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.ProviderID != null)
                    hashCode = hashCode * 59 + this.ProviderID.GetHashCode();
                if (this.ProviderName != null)
                    hashCode = hashCode * 59 + this.ProviderName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.CreditDays != null)
                    hashCode = hashCode * 59 + this.CreditDays.GetHashCode();
                if (this.LocationID != null)
                    hashCode = hashCode * 59 + this.LocationID.GetHashCode();
                if (this.ClientID != null)
                    hashCode = hashCode * 59 + this.ClientID.GetHashCode();
                if (this.DepartmentID != null)
                    hashCode = hashCode * 59 + this.DepartmentID.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.DocumentNumber != null)
                    hashCode = hashCode * 59 + this.DocumentNumber.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.VAT != null)
                    hashCode = hashCode * 59 + this.VAT.GetHashCode();
                if (this.InvoiceID != null)
                    hashCode = hashCode * 59 + this.InvoiceID.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.UUID != null)
                    hashCode = hashCode * 59 + this.UUID.GetHashCode();
                if (this.Series != null)
                    hashCode = hashCode * 59 + this.Series.GetHashCode();
                if (this.VATRetention != null)
                    hashCode = hashCode * 59 + this.VATRetention.GetHashCode();
                if (this.ISRRetention != null)
                    hashCode = hashCode * 59 + this.ISRRetention.GetHashCode();
                if (this.IEPS != null)
                    hashCode = hashCode * 59 + this.IEPS.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.FiscalID != null)
                    hashCode = hashCode * 59 + this.FiscalID.GetHashCode();
                if (this.ISRRetType != null)
                    hashCode = hashCode * 59 + this.ISRRetType.GetHashCode();
                if (this.RFC != null)
                    hashCode = hashCode * 59 + this.RFC.GetHashCode();
                if (this.ExpensePurchaseOrderItems != null)
                    hashCode = hashCode * 59 + this.ExpensePurchaseOrderItems.GetHashCode();
                if (this.DocumentTypeText != null)
                    hashCode = hashCode * 59 + this.DocumentTypeText.GetHashCode();
                if (this.CurrencyName != null)
                    hashCode = hashCode * 59 + this.CurrencyName.GetHashCode();
                if (this.ClientName != null)
                    hashCode = hashCode * 59 + this.ClientName.GetHashCode();
                if (this.LocationName != null)
                    hashCode = hashCode * 59 + this.LocationName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
