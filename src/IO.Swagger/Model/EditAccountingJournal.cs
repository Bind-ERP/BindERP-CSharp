/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EditAccountingJournal
    /// </summary>
    [DataContract]
    public partial class EditAccountingJournal :  IEquatable<EditAccountingJournal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditAccountingJournal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EditAccountingJournal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EditAccountingJournal" /> class.
        /// </summary>
        /// <param name="ID">ID (required).</param>
        /// <param name="Date">Date (required).</param>
        /// <param name="JournalItems">JournalItems (required).</param>
        /// <param name="Comments">Comments.</param>
        /// <param name="LocationID">LocationID.</param>
        public EditAccountingJournal(Guid? ID = default(Guid?), DateTime? Date = default(DateTime?), List<EditAccountingJournalItem> JournalItems = default(List<EditAccountingJournalItem>), string Comments = default(string), Guid? LocationID = default(Guid?))
        {
            // to ensure "ID" is required (not null)
            if (ID == null)
            {
                throw new InvalidDataException("ID is a required property for EditAccountingJournal and cannot be null");
            }
            else
            {
                this.ID = ID;
            }
            // to ensure "Date" is required (not null)
            if (Date == null)
            {
                throw new InvalidDataException("Date is a required property for EditAccountingJournal and cannot be null");
            }
            else
            {
                this.Date = Date;
            }
            // to ensure "JournalItems" is required (not null)
            if (JournalItems == null)
            {
                throw new InvalidDataException("JournalItems is a required property for EditAccountingJournal and cannot be null");
            }
            else
            {
                this.JournalItems = JournalItems;
            }
            this.Comments = Comments;
            this.LocationID = LocationID;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public Guid? ID { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets JournalItems
        /// </summary>
        [DataMember(Name="JournalItems", EmitDefaultValue=false)]
        public List<EditAccountingJournalItem> JournalItems { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="Comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets LocationID
        /// </summary>
        [DataMember(Name="LocationID", EmitDefaultValue=false)]
        public Guid? LocationID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditAccountingJournal {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  JournalItems: ").Append(JournalItems).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  LocationID: ").Append(LocationID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditAccountingJournal);
        }

        /// <summary>
        /// Returns true if EditAccountingJournal instances are equal
        /// </summary>
        /// <param name="input">Instance of EditAccountingJournal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditAccountingJournal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.JournalItems == input.JournalItems ||
                    this.JournalItems != null &&
                    this.JournalItems.SequenceEqual(input.JournalItems)
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.LocationID == input.LocationID ||
                    (this.LocationID != null &&
                    this.LocationID.Equals(input.LocationID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.JournalItems != null)
                    hashCode = hashCode * 59 + this.JournalItems.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.LocationID != null)
                    hashCode = hashCode * 59 + this.LocationID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
