/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NewActivity
    /// </summary>
    [DataContract]
    public partial class NewActivity :  IEquatable<NewActivity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewActivity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewActivity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewActivity" /> class.
        /// </summary>
        /// <param name="Comment">Comment (required).</param>
        /// <param name="StartDate">StartDate (required).</param>
        /// <param name="EndDate">EndDate (required).</param>
        /// <param name="EventType">EventType (required).</param>
        /// <param name="IsPublic">IsPublic (required).</param>
        /// <param name="Title">Title (required).</param>
        /// <param name="Repeatable">Repeatable (required).</param>
        /// <param name="RepeatInterval">RepeatInterval.</param>
        /// <param name="RepeatType">RepeatType.</param>
        /// <param name="Repetitions">Repetitions.</param>
        /// <param name="ExternalID">ExternalID.</param>
        /// <param name="ExternalIDType">ExternalIDType.</param>
        public NewActivity(string Comment = default(string), DateTime? StartDate = default(DateTime?), DateTime? EndDate = default(DateTime?), Guid? EventType = default(Guid?), bool? IsPublic = default(bool?), string Title = default(string), bool? Repeatable = default(bool?), int? RepeatInterval = default(int?), int? RepeatType = default(int?), int? Repetitions = default(int?), Guid? ExternalID = default(Guid?), int? ExternalIDType = default(int?))
        {
            // to ensure "Comment" is required (not null)
            if (Comment == null)
            {
                throw new InvalidDataException("Comment is a required property for NewActivity and cannot be null");
            }
            else
            {
                this.Comment = Comment;
            }
            // to ensure "StartDate" is required (not null)
            if (StartDate == null)
            {
                throw new InvalidDataException("StartDate is a required property for NewActivity and cannot be null");
            }
            else
            {
                this.StartDate = StartDate;
            }
            // to ensure "EndDate" is required (not null)
            if (EndDate == null)
            {
                throw new InvalidDataException("EndDate is a required property for NewActivity and cannot be null");
            }
            else
            {
                this.EndDate = EndDate;
            }
            // to ensure "EventType" is required (not null)
            if (EventType == null)
            {
                throw new InvalidDataException("EventType is a required property for NewActivity and cannot be null");
            }
            else
            {
                this.EventType = EventType;
            }
            // to ensure "IsPublic" is required (not null)
            if (IsPublic == null)
            {
                throw new InvalidDataException("IsPublic is a required property for NewActivity and cannot be null");
            }
            else
            {
                this.IsPublic = IsPublic;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for NewActivity and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Repeatable" is required (not null)
            if (Repeatable == null)
            {
                throw new InvalidDataException("Repeatable is a required property for NewActivity and cannot be null");
            }
            else
            {
                this.Repeatable = Repeatable;
            }
            this.RepeatInterval = RepeatInterval;
            this.RepeatType = RepeatType;
            this.Repetitions = Repetitions;
            this.ExternalID = ExternalID;
            this.ExternalIDType = ExternalIDType;
        }
        
        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="Comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="EndDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name="EventType", EmitDefaultValue=false)]
        public Guid? EventType { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="IsPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Repeatable
        /// </summary>
        [DataMember(Name="Repeatable", EmitDefaultValue=false)]
        public bool? Repeatable { get; set; }

        /// <summary>
        /// Gets or Sets RepeatInterval
        /// </summary>
        [DataMember(Name="RepeatInterval", EmitDefaultValue=false)]
        public int? RepeatInterval { get; set; }

        /// <summary>
        /// Gets or Sets RepeatType
        /// </summary>
        [DataMember(Name="RepeatType", EmitDefaultValue=false)]
        public int? RepeatType { get; set; }

        /// <summary>
        /// Gets or Sets Repetitions
        /// </summary>
        [DataMember(Name="Repetitions", EmitDefaultValue=false)]
        public int? Repetitions { get; set; }

        /// <summary>
        /// Gets or Sets ExternalID
        /// </summary>
        [DataMember(Name="ExternalID", EmitDefaultValue=false)]
        public Guid? ExternalID { get; set; }

        /// <summary>
        /// Gets or Sets ExternalIDType
        /// </summary>
        [DataMember(Name="ExternalIDType", EmitDefaultValue=false)]
        public int? ExternalIDType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewActivity {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Repeatable: ").Append(Repeatable).Append("\n");
            sb.Append("  RepeatInterval: ").Append(RepeatInterval).Append("\n");
            sb.Append("  RepeatType: ").Append(RepeatType).Append("\n");
            sb.Append("  Repetitions: ").Append(Repetitions).Append("\n");
            sb.Append("  ExternalID: ").Append(ExternalID).Append("\n");
            sb.Append("  ExternalIDType: ").Append(ExternalIDType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewActivity);
        }

        /// <summary>
        /// Returns true if NewActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of NewActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewActivity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Repeatable == input.Repeatable ||
                    (this.Repeatable != null &&
                    this.Repeatable.Equals(input.Repeatable))
                ) && 
                (
                    this.RepeatInterval == input.RepeatInterval ||
                    (this.RepeatInterval != null &&
                    this.RepeatInterval.Equals(input.RepeatInterval))
                ) && 
                (
                    this.RepeatType == input.RepeatType ||
                    (this.RepeatType != null &&
                    this.RepeatType.Equals(input.RepeatType))
                ) && 
                (
                    this.Repetitions == input.Repetitions ||
                    (this.Repetitions != null &&
                    this.Repetitions.Equals(input.Repetitions))
                ) && 
                (
                    this.ExternalID == input.ExternalID ||
                    (this.ExternalID != null &&
                    this.ExternalID.Equals(input.ExternalID))
                ) && 
                (
                    this.ExternalIDType == input.ExternalIDType ||
                    (this.ExternalIDType != null &&
                    this.ExternalIDType.Equals(input.ExternalIDType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Repeatable != null)
                    hashCode = hashCode * 59 + this.Repeatable.GetHashCode();
                if (this.RepeatInterval != null)
                    hashCode = hashCode * 59 + this.RepeatInterval.GetHashCode();
                if (this.RepeatType != null)
                    hashCode = hashCode * 59 + this.RepeatType.GetHashCode();
                if (this.Repetitions != null)
                    hashCode = hashCode * 59 + this.Repetitions.GetHashCode();
                if (this.ExternalID != null)
                    hashCode = hashCode * 59 + this.ExternalID.GetHashCode();
                if (this.ExternalIDType != null)
                    hashCode = hashCode * 59 + this.ExternalIDType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
