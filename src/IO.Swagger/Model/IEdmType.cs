/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IEdmType
    /// </summary>
    [DataContract]
    public partial class IEdmType :  IEquatable<IEdmType>, IValidatableObject
    {
        /// <summary>
        /// Defines TypeKind
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeKindEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Primitive for value: Primitive
            /// </summary>
            [EnumMember(Value = "Primitive")]
            Primitive = 2,
            
            /// <summary>
            /// Enum Entity for value: Entity
            /// </summary>
            [EnumMember(Value = "Entity")]
            Entity = 3,
            
            /// <summary>
            /// Enum Complex for value: Complex
            /// </summary>
            [EnumMember(Value = "Complex")]
            Complex = 4,
            
            /// <summary>
            /// Enum Row for value: Row
            /// </summary>
            [EnumMember(Value = "Row")]
            Row = 5,
            
            /// <summary>
            /// Enum Collection for value: Collection
            /// </summary>
            [EnumMember(Value = "Collection")]
            Collection = 6,
            
            /// <summary>
            /// Enum EntityReference for value: EntityReference
            /// </summary>
            [EnumMember(Value = "EntityReference")]
            EntityReference = 7,
            
            /// <summary>
            /// Enum Enum for value: Enum
            /// </summary>
            [EnumMember(Value = "Enum")]
            Enum = 8
        }

        /// <summary>
        /// Gets or Sets TypeKind
        /// </summary>
        [DataMember(Name="TypeKind", EmitDefaultValue=false)]
        public TypeKindEnum? TypeKind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IEdmType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public IEdmType()
        {
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IEdmType {\n");
            sb.Append("  TypeKind: ").Append(TypeKind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IEdmType);
        }

        /// <summary>
        /// Returns true if IEdmType instances are equal
        /// </summary>
        /// <param name="input">Instance of IEdmType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IEdmType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TypeKind == input.TypeKind ||
                    (this.TypeKind != null &&
                    this.TypeKind.Equals(input.TypeKind))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeKind != null)
                    hashCode = hashCode * 59 + this.TypeKind.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
