/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NewProvider
    /// </summary>
    [DataContract]
    public partial class NewProvider :  IEquatable<NewProvider>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewProvider" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewProvider() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewProvider" /> class.
        /// </summary>
        /// <param name="LegalName">LegalName (required).</param>
        /// <param name="CommercialName">CommercialName (required).</param>
        /// <param name="RFC">RFC (required).</param>
        /// <param name="CreditDays">CreditDays (required).</param>
        /// <param name="CreditAmount">CreditAmount (required).</param>
        /// <param name="SATCompanyAccountID">SATCompanyAccountID.</param>
        /// <param name="LocationID">LocationID.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Telephones">Telephones.</param>
        public NewProvider(string LegalName = default(string), string CommercialName = default(string), string RFC = default(string), int? CreditDays = default(int?), double? CreditAmount = default(double?), Guid? SATCompanyAccountID = default(Guid?), Guid? LocationID = default(Guid?), string Email = default(string), string Telephones = default(string))
        {
            // to ensure "LegalName" is required (not null)
            if (LegalName == null)
            {
                throw new InvalidDataException("LegalName is a required property for NewProvider and cannot be null");
            }
            else
            {
                this.LegalName = LegalName;
            }
            // to ensure "CommercialName" is required (not null)
            if (CommercialName == null)
            {
                throw new InvalidDataException("CommercialName is a required property for NewProvider and cannot be null");
            }
            else
            {
                this.CommercialName = CommercialName;
            }
            // to ensure "RFC" is required (not null)
            if (RFC == null)
            {
                throw new InvalidDataException("RFC is a required property for NewProvider and cannot be null");
            }
            else
            {
                this.RFC = RFC;
            }
            // to ensure "CreditDays" is required (not null)
            if (CreditDays == null)
            {
                throw new InvalidDataException("CreditDays is a required property for NewProvider and cannot be null");
            }
            else
            {
                this.CreditDays = CreditDays;
            }
            // to ensure "CreditAmount" is required (not null)
            if (CreditAmount == null)
            {
                throw new InvalidDataException("CreditAmount is a required property for NewProvider and cannot be null");
            }
            else
            {
                this.CreditAmount = CreditAmount;
            }
            this.SATCompanyAccountID = SATCompanyAccountID;
            this.LocationID = LocationID;
            this.Email = Email;
            this.Telephones = Telephones;
        }
        
        /// <summary>
        /// Gets or Sets LegalName
        /// </summary>
        [DataMember(Name="LegalName", EmitDefaultValue=false)]
        public string LegalName { get; set; }

        /// <summary>
        /// Gets or Sets CommercialName
        /// </summary>
        [DataMember(Name="CommercialName", EmitDefaultValue=false)]
        public string CommercialName { get; set; }

        /// <summary>
        /// Gets or Sets RFC
        /// </summary>
        [DataMember(Name="RFC", EmitDefaultValue=false)]
        public string RFC { get; set; }

        /// <summary>
        /// Gets or Sets CreditDays
        /// </summary>
        [DataMember(Name="CreditDays", EmitDefaultValue=false)]
        public int? CreditDays { get; set; }

        /// <summary>
        /// Gets or Sets CreditAmount
        /// </summary>
        [DataMember(Name="CreditAmount", EmitDefaultValue=false)]
        public double? CreditAmount { get; set; }

        /// <summary>
        /// Gets or Sets SATCompanyAccountID
        /// </summary>
        [DataMember(Name="SATCompanyAccountID", EmitDefaultValue=false)]
        public Guid? SATCompanyAccountID { get; set; }

        /// <summary>
        /// Gets or Sets LocationID
        /// </summary>
        [DataMember(Name="LocationID", EmitDefaultValue=false)]
        public Guid? LocationID { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Telephones
        /// </summary>
        [DataMember(Name="Telephones", EmitDefaultValue=false)]
        public string Telephones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewProvider {\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  CommercialName: ").Append(CommercialName).Append("\n");
            sb.Append("  RFC: ").Append(RFC).Append("\n");
            sb.Append("  CreditDays: ").Append(CreditDays).Append("\n");
            sb.Append("  CreditAmount: ").Append(CreditAmount).Append("\n");
            sb.Append("  SATCompanyAccountID: ").Append(SATCompanyAccountID).Append("\n");
            sb.Append("  LocationID: ").Append(LocationID).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewProvider);
        }

        /// <summary>
        /// Returns true if NewProvider instances are equal
        /// </summary>
        /// <param name="input">Instance of NewProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewProvider input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.CommercialName == input.CommercialName ||
                    (this.CommercialName != null &&
                    this.CommercialName.Equals(input.CommercialName))
                ) && 
                (
                    this.RFC == input.RFC ||
                    (this.RFC != null &&
                    this.RFC.Equals(input.RFC))
                ) && 
                (
                    this.CreditDays == input.CreditDays ||
                    (this.CreditDays != null &&
                    this.CreditDays.Equals(input.CreditDays))
                ) && 
                (
                    this.CreditAmount == input.CreditAmount ||
                    (this.CreditAmount != null &&
                    this.CreditAmount.Equals(input.CreditAmount))
                ) && 
                (
                    this.SATCompanyAccountID == input.SATCompanyAccountID ||
                    (this.SATCompanyAccountID != null &&
                    this.SATCompanyAccountID.Equals(input.SATCompanyAccountID))
                ) && 
                (
                    this.LocationID == input.LocationID ||
                    (this.LocationID != null &&
                    this.LocationID.Equals(input.LocationID))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    (this.Telephones != null &&
                    this.Telephones.Equals(input.Telephones))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LegalName != null)
                    hashCode = hashCode * 59 + this.LegalName.GetHashCode();
                if (this.CommercialName != null)
                    hashCode = hashCode * 59 + this.CommercialName.GetHashCode();
                if (this.RFC != null)
                    hashCode = hashCode * 59 + this.RFC.GetHashCode();
                if (this.CreditDays != null)
                    hashCode = hashCode * 59 + this.CreditDays.GetHashCode();
                if (this.CreditAmount != null)
                    hashCode = hashCode * 59 + this.CreditAmount.GetHashCode();
                if (this.SATCompanyAccountID != null)
                    hashCode = hashCode * 59 + this.SATCompanyAccountID.GetHashCode();
                if (this.LocationID != null)
                    hashCode = hashCode * 59 + this.LocationID.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Telephones != null)
                    hashCode = hashCode * 59 + this.Telephones.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RFC (string) pattern
            Regex regexRFC = new Regex(@"[A-Z,a-z,ñ,Ñ,&]{3,4}[0-9]{2}[0-1][0-9][0-3][0-9][A-Z,a-z,0-9]?[A-Z,a-z,0-9]?[0-9,A-Z,a-z]?", RegexOptions.CultureInvariant);
            if (false == regexRFC.Match(this.RFC).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RFC, must match a pattern of " + regexRFC, new [] { "RFC" });
            }

            yield break;
        }
    }

}
