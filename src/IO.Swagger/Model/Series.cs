/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Series
    /// </summary>
    [DataContract]
    public partial class Series :  IEquatable<Series>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Series" /> class.
        /// </summary>
        /// <param name="ID">ID.</param>
        /// <param name="Serie">Serie.</param>
        /// <param name="StartNumber">StartNumber.</param>
        /// <param name="CurrentNumber">CurrentNumber.</param>
        /// <param name="Date">Date.</param>
        /// <param name="DocType">DocType.</param>
        /// <param name="DocTypeText">DocTypeText.</param>
        /// <param name="Locations">Locations.</param>
        public Series(Guid? ID = default(Guid?), string Serie = default(string), long? StartNumber = default(long?), long? CurrentNumber = default(long?), DateTime? Date = default(DateTime?), int? DocType = default(int?), string DocTypeText = default(string), List<Guid?> Locations = default(List<Guid?>))
        {
            this.ID = ID;
            this.Serie = Serie;
            this.StartNumber = StartNumber;
            this.CurrentNumber = CurrentNumber;
            this.Date = Date;
            this.DocType = DocType;
            this.DocTypeText = DocTypeText;
            this.Locations = Locations;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public Guid? ID { get; set; }

        /// <summary>
        /// Gets or Sets Serie
        /// </summary>
        [DataMember(Name="Serie", EmitDefaultValue=false)]
        public string Serie { get; set; }

        /// <summary>
        /// Gets or Sets StartNumber
        /// </summary>
        [DataMember(Name="StartNumber", EmitDefaultValue=false)]
        public long? StartNumber { get; set; }

        /// <summary>
        /// Gets or Sets CurrentNumber
        /// </summary>
        [DataMember(Name="CurrentNumber", EmitDefaultValue=false)]
        public long? CurrentNumber { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets DocType
        /// </summary>
        [DataMember(Name="DocType", EmitDefaultValue=false)]
        public int? DocType { get; set; }

        /// <summary>
        /// Gets or Sets DocTypeText
        /// </summary>
        [DataMember(Name="DocTypeText", EmitDefaultValue=false)]
        public string DocTypeText { get; set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [DataMember(Name="Locations", EmitDefaultValue=false)]
        public List<Guid?> Locations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Series {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Serie: ").Append(Serie).Append("\n");
            sb.Append("  StartNumber: ").Append(StartNumber).Append("\n");
            sb.Append("  CurrentNumber: ").Append(CurrentNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DocType: ").Append(DocType).Append("\n");
            sb.Append("  DocTypeText: ").Append(DocTypeText).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Series);
        }

        /// <summary>
        /// Returns true if Series instances are equal
        /// </summary>
        /// <param name="input">Instance of Series to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Series input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.Serie == input.Serie ||
                    (this.Serie != null &&
                    this.Serie.Equals(input.Serie))
                ) && 
                (
                    this.StartNumber == input.StartNumber ||
                    (this.StartNumber != null &&
                    this.StartNumber.Equals(input.StartNumber))
                ) && 
                (
                    this.CurrentNumber == input.CurrentNumber ||
                    (this.CurrentNumber != null &&
                    this.CurrentNumber.Equals(input.CurrentNumber))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DocType == input.DocType ||
                    (this.DocType != null &&
                    this.DocType.Equals(input.DocType))
                ) && 
                (
                    this.DocTypeText == input.DocTypeText ||
                    (this.DocTypeText != null &&
                    this.DocTypeText.Equals(input.DocTypeText))
                ) && 
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.Serie != null)
                    hashCode = hashCode * 59 + this.Serie.GetHashCode();
                if (this.StartNumber != null)
                    hashCode = hashCode * 59 + this.StartNumber.GetHashCode();
                if (this.CurrentNumber != null)
                    hashCode = hashCode * 59 + this.CurrentNumber.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.DocType != null)
                    hashCode = hashCode * 59 + this.DocType.GetHashCode();
                if (this.DocTypeText != null)
                    hashCode = hashCode * 59 + this.DocTypeText.GetHashCode();
                if (this.Locations != null)
                    hashCode = hashCode * 59 + this.Locations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
