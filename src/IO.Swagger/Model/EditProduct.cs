/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EditProduct
    /// </summary>
    [DataContract]
    public partial class EditProduct :  IEquatable<EditProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EditProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EditProduct" /> class.
        /// </summary>
        /// <param name="ID">ID (required).</param>
        /// <param name="Code">Code (required).</param>
        /// <param name="Title">Title (required).</param>
        /// <param name="Cost">Cost (required).</param>
        /// <param name="CurrencyID">CurrencyID (required).</param>
        /// <param name="ExchangeRate">ExchangeRate.</param>
        /// <param name="SKU">SKU.</param>
        /// <param name="Description">Description.</param>
        /// <param name="CostType">CostType.</param>
        /// <param name="Category1ID">Category1ID.</param>
        /// <param name="Category2ID">Category2ID.</param>
        /// <param name="Category3ID">Category3ID.</param>
        /// <param name="ChargeVAT">ChargeVAT.</param>
        /// <param name="Number">Number.</param>
        /// <param name="PricingType">PricingType.</param>
        /// <param name="Unit">Unit.</param>
        /// <param name="PurchaseType">PurchaseType.</param>
        /// <param name="IEPSRate">IEPSRate.</param>
        /// <param name="Type">Type.</param>
        /// <param name="ProductionAuto">ProductionAuto.</param>
        public EditProduct(Guid? ID = default(Guid?), string Code = default(string), string Title = default(string), double? Cost = default(double?), Guid? CurrencyID = default(Guid?), double? ExchangeRate = default(double?), string SKU = default(string), string Description = default(string), int? CostType = default(int?), Guid? Category1ID = default(Guid?), Guid? Category2ID = default(Guid?), Guid? Category3ID = default(Guid?), bool? ChargeVAT = default(bool?), int? Number = default(int?), int? PricingType = default(int?), string Unit = default(string), int? PurchaseType = default(int?), double? IEPSRate = default(double?), int? Type = default(int?), bool? ProductionAuto = default(bool?))
        {
            // to ensure "ID" is required (not null)
            if (ID == null)
            {
                throw new InvalidDataException("ID is a required property for EditProduct and cannot be null");
            }
            else
            {
                this.ID = ID;
            }
            // to ensure "Code" is required (not null)
            if (Code == null)
            {
                throw new InvalidDataException("Code is a required property for EditProduct and cannot be null");
            }
            else
            {
                this.Code = Code;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for EditProduct and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Cost" is required (not null)
            if (Cost == null)
            {
                throw new InvalidDataException("Cost is a required property for EditProduct and cannot be null");
            }
            else
            {
                this.Cost = Cost;
            }
            // to ensure "CurrencyID" is required (not null)
            if (CurrencyID == null)
            {
                throw new InvalidDataException("CurrencyID is a required property for EditProduct and cannot be null");
            }
            else
            {
                this.CurrencyID = CurrencyID;
            }
            this.ExchangeRate = ExchangeRate;
            this.SKU = SKU;
            this.Description = Description;
            this.CostType = CostType;
            this.Category1ID = Category1ID;
            this.Category2ID = Category2ID;
            this.Category3ID = Category3ID;
            this.ChargeVAT = ChargeVAT;
            this.Number = Number;
            this.PricingType = PricingType;
            this.Unit = Unit;
            this.PurchaseType = PurchaseType;
            this.IEPSRate = IEPSRate;
            this.Type = Type;
            this.ProductionAuto = ProductionAuto;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public Guid? ID { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="Cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public Guid? CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="ExchangeRate", EmitDefaultValue=false)]
        public double? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets SKU
        /// </summary>
        [DataMember(Name="SKU", EmitDefaultValue=false)]
        public string SKU { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CostType
        /// </summary>
        [DataMember(Name="CostType", EmitDefaultValue=false)]
        public int? CostType { get; set; }

        /// <summary>
        /// Gets or Sets Category1ID
        /// </summary>
        [DataMember(Name="Category1ID", EmitDefaultValue=false)]
        public Guid? Category1ID { get; set; }

        /// <summary>
        /// Gets or Sets Category2ID
        /// </summary>
        [DataMember(Name="Category2ID", EmitDefaultValue=false)]
        public Guid? Category2ID { get; set; }

        /// <summary>
        /// Gets or Sets Category3ID
        /// </summary>
        [DataMember(Name="Category3ID", EmitDefaultValue=false)]
        public Guid? Category3ID { get; set; }

        /// <summary>
        /// Gets or Sets ChargeVAT
        /// </summary>
        [DataMember(Name="ChargeVAT", EmitDefaultValue=false)]
        public bool? ChargeVAT { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or Sets PricingType
        /// </summary>
        [DataMember(Name="PricingType", EmitDefaultValue=false)]
        public int? PricingType { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="Unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseType
        /// </summary>
        [DataMember(Name="PurchaseType", EmitDefaultValue=false)]
        public int? PurchaseType { get; set; }

        /// <summary>
        /// Gets or Sets IEPSRate
        /// </summary>
        [DataMember(Name="IEPSRate", EmitDefaultValue=false)]
        public double? IEPSRate { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Gets or Sets ProductionAuto
        /// </summary>
        [DataMember(Name="ProductionAuto", EmitDefaultValue=false)]
        public bool? ProductionAuto { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EditProduct {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  SKU: ").Append(SKU).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CostType: ").Append(CostType).Append("\n");
            sb.Append("  Category1ID: ").Append(Category1ID).Append("\n");
            sb.Append("  Category2ID: ").Append(Category2ID).Append("\n");
            sb.Append("  Category3ID: ").Append(Category3ID).Append("\n");
            sb.Append("  ChargeVAT: ").Append(ChargeVAT).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  PricingType: ").Append(PricingType).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  PurchaseType: ").Append(PurchaseType).Append("\n");
            sb.Append("  IEPSRate: ").Append(IEPSRate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ProductionAuto: ").Append(ProductionAuto).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditProduct);
        }

        /// <summary>
        /// Returns true if EditProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of EditProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditProduct input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.SKU == input.SKU ||
                    (this.SKU != null &&
                    this.SKU.Equals(input.SKU))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CostType == input.CostType ||
                    (this.CostType != null &&
                    this.CostType.Equals(input.CostType))
                ) && 
                (
                    this.Category1ID == input.Category1ID ||
                    (this.Category1ID != null &&
                    this.Category1ID.Equals(input.Category1ID))
                ) && 
                (
                    this.Category2ID == input.Category2ID ||
                    (this.Category2ID != null &&
                    this.Category2ID.Equals(input.Category2ID))
                ) && 
                (
                    this.Category3ID == input.Category3ID ||
                    (this.Category3ID != null &&
                    this.Category3ID.Equals(input.Category3ID))
                ) && 
                (
                    this.ChargeVAT == input.ChargeVAT ||
                    (this.ChargeVAT != null &&
                    this.ChargeVAT.Equals(input.ChargeVAT))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.PricingType == input.PricingType ||
                    (this.PricingType != null &&
                    this.PricingType.Equals(input.PricingType))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.PurchaseType == input.PurchaseType ||
                    (this.PurchaseType != null &&
                    this.PurchaseType.Equals(input.PurchaseType))
                ) && 
                (
                    this.IEPSRate == input.IEPSRate ||
                    (this.IEPSRate != null &&
                    this.IEPSRate.Equals(input.IEPSRate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ProductionAuto == input.ProductionAuto ||
                    (this.ProductionAuto != null &&
                    this.ProductionAuto.Equals(input.ProductionAuto))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.SKU != null)
                    hashCode = hashCode * 59 + this.SKU.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CostType != null)
                    hashCode = hashCode * 59 + this.CostType.GetHashCode();
                if (this.Category1ID != null)
                    hashCode = hashCode * 59 + this.Category1ID.GetHashCode();
                if (this.Category2ID != null)
                    hashCode = hashCode * 59 + this.Category2ID.GetHashCode();
                if (this.Category3ID != null)
                    hashCode = hashCode * 59 + this.Category3ID.GetHashCode();
                if (this.ChargeVAT != null)
                    hashCode = hashCode * 59 + this.ChargeVAT.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.PricingType != null)
                    hashCode = hashCode * 59 + this.PricingType.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.PurchaseType != null)
                    hashCode = hashCode * 59 + this.PurchaseType.GetHashCode();
                if (this.IEPSRate != null)
                    hashCode = hashCode * 59 + this.IEPSRate.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ProductionAuto != null)
                    hashCode = hashCode * 59 + this.ProductionAuto.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
