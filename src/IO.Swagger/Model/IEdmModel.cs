/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IEdmModel
    /// </summary>
    [DataContract]
    public partial class IEdmModel :  IEquatable<IEdmModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IEdmModel" /> class.
        /// </summary>
        /// <param name="SchemaElements">SchemaElements.</param>
        /// <param name="VocabularyAnnotations">VocabularyAnnotations.</param>
        /// <param name="ReferencedModels">ReferencedModels.</param>
        /// <param name="DirectValueAnnotationsManager">DirectValueAnnotationsManager.</param>
        public IEdmModel(List<IEdmSchemaElement> SchemaElements = default(List<IEdmSchemaElement>), List<IEdmVocabularyAnnotation> VocabularyAnnotations = default(List<IEdmVocabularyAnnotation>), List<IEdmModel> ReferencedModels = default(List<IEdmModel>), IEdmDirectValueAnnotationsManager DirectValueAnnotationsManager = default(IEdmDirectValueAnnotationsManager))
        {
            this.SchemaElements = SchemaElements;
            this.VocabularyAnnotations = VocabularyAnnotations;
            this.ReferencedModels = ReferencedModels;
            this.DirectValueAnnotationsManager = DirectValueAnnotationsManager;
        }
        
        /// <summary>
        /// Gets or Sets SchemaElements
        /// </summary>
        [DataMember(Name="SchemaElements", EmitDefaultValue=false)]
        public List<IEdmSchemaElement> SchemaElements { get; set; }

        /// <summary>
        /// Gets or Sets VocabularyAnnotations
        /// </summary>
        [DataMember(Name="VocabularyAnnotations", EmitDefaultValue=false)]
        public List<IEdmVocabularyAnnotation> VocabularyAnnotations { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedModels
        /// </summary>
        [DataMember(Name="ReferencedModels", EmitDefaultValue=false)]
        public List<IEdmModel> ReferencedModels { get; set; }

        /// <summary>
        /// Gets or Sets DirectValueAnnotationsManager
        /// </summary>
        [DataMember(Name="DirectValueAnnotationsManager", EmitDefaultValue=false)]
        public IEdmDirectValueAnnotationsManager DirectValueAnnotationsManager { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IEdmModel {\n");
            sb.Append("  SchemaElements: ").Append(SchemaElements).Append("\n");
            sb.Append("  VocabularyAnnotations: ").Append(VocabularyAnnotations).Append("\n");
            sb.Append("  ReferencedModels: ").Append(ReferencedModels).Append("\n");
            sb.Append("  DirectValueAnnotationsManager: ").Append(DirectValueAnnotationsManager).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IEdmModel);
        }

        /// <summary>
        /// Returns true if IEdmModel instances are equal
        /// </summary>
        /// <param name="input">Instance of IEdmModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IEdmModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SchemaElements == input.SchemaElements ||
                    this.SchemaElements != null &&
                    this.SchemaElements.SequenceEqual(input.SchemaElements)
                ) && 
                (
                    this.VocabularyAnnotations == input.VocabularyAnnotations ||
                    this.VocabularyAnnotations != null &&
                    this.VocabularyAnnotations.SequenceEqual(input.VocabularyAnnotations)
                ) && 
                (
                    this.ReferencedModels == input.ReferencedModels ||
                    this.ReferencedModels != null &&
                    this.ReferencedModels.SequenceEqual(input.ReferencedModels)
                ) && 
                (
                    this.DirectValueAnnotationsManager == input.DirectValueAnnotationsManager ||
                    (this.DirectValueAnnotationsManager != null &&
                    this.DirectValueAnnotationsManager.Equals(input.DirectValueAnnotationsManager))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SchemaElements != null)
                    hashCode = hashCode * 59 + this.SchemaElements.GetHashCode();
                if (this.VocabularyAnnotations != null)
                    hashCode = hashCode * 59 + this.VocabularyAnnotations.GetHashCode();
                if (this.ReferencedModels != null)
                    hashCode = hashCode * 59 + this.ReferencedModels.GetHashCode();
                if (this.DirectValueAnnotationsManager != null)
                    hashCode = hashCode * 59 + this.DirectValueAnnotationsManager.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
