/* 
 * Bind ERP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NewInvoiceService
    /// </summary>
    [DataContract]
    public partial class NewInvoiceService :  IEquatable<NewInvoiceService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewInvoiceService" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewInvoiceService() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewInvoiceService" /> class.
        /// </summary>
        /// <param name="ID">ID (required).</param>
        /// <param name="Title">Title (required).</param>
        /// <param name="Price">Price (required).</param>
        /// <param name="Qty">Qty (required).</param>
        /// <param name="VAT">VAT.</param>
        /// <param name="Comments">Comments.</param>
        /// <param name="VATExempt">VATExempt.</param>
        /// <param name="IndexNumber">IndexNumber.</param>
        /// <param name="VariableConcept">VariableConcept.</param>
        /// <param name="OrderItemID">OrderItemID.</param>
        public NewInvoiceService(Guid? ID = default(Guid?), string Title = default(string), double? Price = default(double?), double? Qty = default(double?), double? VAT = default(double?), string Comments = default(string), bool? VATExempt = default(bool?), int? IndexNumber = default(int?), bool? VariableConcept = default(bool?), Guid? OrderItemID = default(Guid?))
        {
            // to ensure "ID" is required (not null)
            if (ID == null)
            {
                throw new InvalidDataException("ID is a required property for NewInvoiceService and cannot be null");
            }
            else
            {
                this.ID = ID;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for NewInvoiceService and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Price" is required (not null)
            if (Price == null)
            {
                throw new InvalidDataException("Price is a required property for NewInvoiceService and cannot be null");
            }
            else
            {
                this.Price = Price;
            }
            // to ensure "Qty" is required (not null)
            if (Qty == null)
            {
                throw new InvalidDataException("Qty is a required property for NewInvoiceService and cannot be null");
            }
            else
            {
                this.Qty = Qty;
            }
            this.VAT = VAT;
            this.Comments = Comments;
            this.VATExempt = VATExempt;
            this.IndexNumber = IndexNumber;
            this.VariableConcept = VariableConcept;
            this.OrderItemID = OrderItemID;
        }
        
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public Guid? ID { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="Qty", EmitDefaultValue=false)]
        public double? Qty { get; set; }

        /// <summary>
        /// Gets or Sets VAT
        /// </summary>
        [DataMember(Name="VAT", EmitDefaultValue=false)]
        public double? VAT { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="Comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Gets or Sets VATExempt
        /// </summary>
        [DataMember(Name="VATExempt", EmitDefaultValue=false)]
        public bool? VATExempt { get; set; }

        /// <summary>
        /// Gets or Sets IndexNumber
        /// </summary>
        [DataMember(Name="IndexNumber", EmitDefaultValue=false)]
        public int? IndexNumber { get; set; }

        /// <summary>
        /// Gets or Sets VariableConcept
        /// </summary>
        [DataMember(Name="VariableConcept", EmitDefaultValue=false)]
        public bool? VariableConcept { get; set; }

        /// <summary>
        /// Gets or Sets OrderItemID
        /// </summary>
        [DataMember(Name="OrderItemID", EmitDefaultValue=false)]
        public Guid? OrderItemID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewInvoiceService {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  VAT: ").Append(VAT).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  VATExempt: ").Append(VATExempt).Append("\n");
            sb.Append("  IndexNumber: ").Append(IndexNumber).Append("\n");
            sb.Append("  VariableConcept: ").Append(VariableConcept).Append("\n");
            sb.Append("  OrderItemID: ").Append(OrderItemID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewInvoiceService);
        }

        /// <summary>
        /// Returns true if NewInvoiceService instances are equal
        /// </summary>
        /// <param name="input">Instance of NewInvoiceService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewInvoiceService input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Qty == input.Qty ||
                    (this.Qty != null &&
                    this.Qty.Equals(input.Qty))
                ) && 
                (
                    this.VAT == input.VAT ||
                    (this.VAT != null &&
                    this.VAT.Equals(input.VAT))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.VATExempt == input.VATExempt ||
                    (this.VATExempt != null &&
                    this.VATExempt.Equals(input.VATExempt))
                ) && 
                (
                    this.IndexNumber == input.IndexNumber ||
                    (this.IndexNumber != null &&
                    this.IndexNumber.Equals(input.IndexNumber))
                ) && 
                (
                    this.VariableConcept == input.VariableConcept ||
                    (this.VariableConcept != null &&
                    this.VariableConcept.Equals(input.VariableConcept))
                ) && 
                (
                    this.OrderItemID == input.OrderItemID ||
                    (this.OrderItemID != null &&
                    this.OrderItemID.Equals(input.OrderItemID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Qty != null)
                    hashCode = hashCode * 59 + this.Qty.GetHashCode();
                if (this.VAT != null)
                    hashCode = hashCode * 59 + this.VAT.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.VATExempt != null)
                    hashCode = hashCode * 59 + this.VATExempt.GetHashCode();
                if (this.IndexNumber != null)
                    hashCode = hashCode * 59 + this.IndexNumber.GetHashCode();
                if (this.VariableConcept != null)
                    hashCode = hashCode * 59 + this.VariableConcept.GetHashCode();
                if (this.OrderItemID != null)
                    hashCode = hashCode * 59 + this.OrderItemID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
